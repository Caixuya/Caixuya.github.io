<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tia的学习笔记</title>
  
  
  <link href="http://caixuya.github.io/atom.xml" rel="self"/>
  
  <link href="http://caixuya.github.io/"/>
  <updated>2023-06-11T17:47:34.000Z</updated>
  <id>http://caixuya.github.io/</id>
  
  <author>
    <name>caixuya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建openvpn</title>
    <link href="http://caixuya.github.io/2023/06/12/%E6%90%AD%E5%BB%BAopenvpn/"/>
    <id>http://caixuya.github.io/2023/06/12/%E6%90%AD%E5%BB%BAopenvpn/</id>
    <published>2023-06-11T17:30:31.000Z</published>
    <updated>2023-06-11T17:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>购买腾讯云服务器：<a href="https://blog.csdn.net/SoloVersion/article/details/123854852?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168589280616800185825175%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168589280616800185825175&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-123854852-null-null.142%5Ev88%5Einsert_down28v1,239%5Ev2%5Einsert_chatgpt&utm_term=XShell&spm=1018.2226.3001.4187">服务器</a><br><br>xshell服务器连接工具教程：<a href="https://www.puttylink.com/">xshell</a><br><br>搭建vpn的教程参考：<br><br><a href="https://zhuanlan.zhihu.com/p/630327056">搭建vpn</a><br><br><a href="https://blog.csdn.net/rockage/article/details/127190263">一看就懂的保姆级教程：openvn设置 （亲测通过）</a><br><br><a href="http://www.itca.cc/VPN%E6%90%AD%E5%BB%BA/openvpn.html">在 Windows Server2019 上搭建 OpenVPN 服务端</a><br><br>（参考了很多资料，大概有十几篇，大多都没有保存有网址，只记下这三个，并非有意不列出全部出处，如有侵权，麻烦告知，抱歉抱歉，不到最后我也不知道参考的是否有用，网页太多就关掉了许多）<br><br>搭建vpn的时候参考上面链接的教程就行<br><br>其中有一个坑，客户端的client.ovpn的配置中，<code>remote 43.156.116.201 1194 #这里需要写的是openvpn服务器IP地址端口号，也就是购买的服务器的公网ip</code><br></p><p>环境：<br>服务器：腾讯云服务器<br>客户端：在本机windows10安装openvpn客户端</p><p>其中五个重要的配置如下：<br></p><p>一：server.conf的配置如下：<br></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">port <span class="number">1198</span>                               <span class="meta">#端口</span></span><br><span class="line">proto tcp                               <span class="meta">#协议</span></span><br><span class="line">dev tun                                 <span class="meta">#采用路由隧道模式tun</span></span><br><span class="line">ca ca.crt                               <span class="meta">#ca证书文件位置</span></span><br><span class="line">cert <span class="keyword">server</span>.crt                         <span class="meta">#服务端公钥名称</span></span><br><span class="line">key <span class="keyword">server</span>.key                          <span class="meta">#服务端私钥名称</span></span><br><span class="line">dh dh.pem                               <span class="meta">#交换证书</span></span><br><span class="line"><span class="keyword">server</span> <span class="number">10.8</span><span class="number">.0</span><span class="number">.0</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>           <span class="meta">#给客户端分配地址池，注意：不能和VPN服务器内网网段有相同&quot;</span></span><br><span class="line">push <span class="string">&quot;route 0.0.0.0 0.0.0.0&quot;</span></span><br><span class="line">push <span class="string">&quot;dhcp-option DNS 208.67.222.222&quot;</span></span><br><span class="line">push <span class="string">&quot;dhcp-option DNS 208.67.220.220&quot;</span></span><br><span class="line">push <span class="string">&quot;route 192.168.0.0 255.255.255.0&quot;</span>   <span class="meta">#允许客户端访问内网172.16.0.0网段</span></span><br><span class="line">ifconfig-pool-persist ipp.txt           <span class="meta">#地址池记录文件位置</span></span><br><span class="line">keepalive <span class="number">10</span> <span class="number">120</span>                        <span class="meta">#存活时间，10秒ping一次,120 如未收到响应则视为断线</span></span><br><span class="line">max-clients <span class="number">100</span>                         <span class="meta">#最多允许100个客户端连接</span></span><br><span class="line">status openvpn-status.log               <span class="meta">#日志记录位置</span></span><br><span class="line">verb <span class="number">3</span>                                  <span class="meta">#openvpn版本</span></span><br><span class="line"><span class="keyword">client</span>-to-<span class="keyword">client</span>                        <span class="meta">#客户端与客户端之间支持通信</span></span><br><span class="line">log /<span class="built_in">var</span>/log/openvpn.log                <span class="meta">#openvpn日志记录位置</span></span><br><span class="line">persist-key     <span class="meta">#通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keys。</span></span><br><span class="line">persist-tun     <span class="meta">#检测超时后，重新启动VPN，一直保持tun是linkup的。否则网络会先linkdown然后再linkup</span></span><br><span class="line"><span class="keyword">client</span>-config-dir /etc/openvpn/ccd</span><br><span class="line">auth-nocache</span><br><span class="line">cipher AES<span class="number">-256</span>-GCM</span><br><span class="line">ncp-ciphers AES<span class="number">-256</span>-GCM:AES<span class="number">-128</span>-GCM</span><br></pre></td></tr></table></figure><p>二：client.ovpn的配置如下：<br></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">client</span>                  <span class="meta">#指定当前VPN是客户端</span></span><br><span class="line">dev tun                 <span class="meta">#使用tun隧道传输协议</span></span><br><span class="line">proto tcp               <span class="meta">#使用udp协议传输数据</span></span><br><span class="line">remote <span class="number">43.156</span><span class="number">.116</span><span class="number">.201</span> <span class="number">1198</span> <span class="meta">#openvpn服务器IP地址端口号</span></span><br><span class="line">resolv-<span class="keyword">retry</span> infinite   <span class="meta">#断线自动重新连接，在网络不稳定的情况下非常有用</span></span><br><span class="line">nobind                  <span class="meta">#不绑定本地特定的端口号</span></span><br><span class="line">ca ca.crt               <span class="meta">#指定CA证书的文件路径</span></span><br><span class="line">cert <span class="keyword">client</span>.crt         <span class="meta">#指定当前客户端的证书文件路径</span></span><br><span class="line">key <span class="keyword">client</span>.key          <span class="meta">#指定当前客户端的私钥文件路径</span></span><br><span class="line">verb <span class="number">3</span>                  <span class="meta">#指定日志文件的记录详细级别，可选0-9，等级越高日志内容越详细</span></span><br><span class="line">persist-key     <span class="meta">#通过keepalive检测超时后，重新启动VPN，不重新读取keys，保留第一次使用的keys</span></span><br><span class="line">persist-tun     <span class="meta">#检测超时后，重新启动VPN，一直保持tun是linkup的。否则网络会先linkdown然后再linkup</span></span><br><span class="line">remote-cert-tls <span class="keyword">server</span></span><br><span class="line">auth-nocache</span><br><span class="line">cipher AES<span class="number">-256</span>-GCM</span><br><span class="line">ncp-ciphers AES<span class="number">-256</span>-GCM:AES<span class="number">-128</span>-GCM</span><br></pre></td></tr></table></figure><p>三：验证<br><br>其他步骤都按照教程完成后，右击WiFi图标–打开“网路和Internet设置”–高级网络设置–更改适配器选项<br><br>打开界面后可以看到OpenVPN TAP-Windows6的红色叉×已经没有了<br><br>然后双击自己正在连接的网络，选择“属性”–共享–勾上“允许其他网络用户通过此计算机的Internet连接来连接”以及“允许其他网络用户控制或禁用共享的Internet连接”–家庭网络连接选择“OpenVPN TAP-Windows6”<br>连接成功后，在windows中打开cmd输入外网的公网地址，如果能ping通，配置就是没有问题的，openvpn就搭建成功啦，但是现在还是无法连接外网<br><br>还需要进行路由配置<br></p><p>四：修改了etc&#x2F;sysctl.conf的配置：<br><br><a href="https://www.nuomiphp.com/serverfault/zh/60489accdc3d0204513861e6.html">参考链接</a><br><br>将net.ipv4.ip_forward &#x3D; 0 改成 net.ipv4.ip_forward &#x3D; 1<br></p><p>五：修改路由配置<br><br><a href="https://www.shuzhiduo.com/A/MAzARoQRJ9/">参考连接</a><br><br>我的内网ip是：192.168.8.4<br><br>（腾讯云服务器）外网的ip是：（公）43.156.116.201    （内）10.0.0.7<br></p><p>我在windows端输入的cmd命令是<br><br><code>route delete 0.0.0.0</code><br><br><code>route add 0.0.0.0 mask 0.0.0.0 10.8.0.5 -p</code><br><br><code>route add 192.168.0.0 mask 255.255.255.0 192.168.8.1 -p</code><br></p><p>这里输入的10.8.0.5和192.168.8.1是在server.conf中设置的给客户端分配地址池的网关以及你的内网地址的网关<br><br>具体可以看route print中的Gateway一列,如下：<br></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Network</span> Destination        Netmask          Gateway       Interface  Metric</span><br><span class="line">          <span class="attribute">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>          <span class="number">0.0.0.0</span>      <span class="number">192.168.8.1</span>      <span class="number">192.168.8.4</span>     <span class="number">55</span></span><br><span class="line">          <span class="attribute">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>          <span class="number">0.0.0.0</span>         <span class="number">10.8.0.5</span>         <span class="number">10.8.0.6</span>     <span class="number">26</span></span><br><span class="line">         <span class="attribute">10</span>.<span class="number">8</span>.<span class="number">0</span>.<span class="number">0</span>    <span class="number">255.255.255.0</span>         <span class="number">10.8.0.5</span>         <span class="number">10.8.0.6</span>    <span class="number">281</span></span><br><span class="line">         <span class="attribute">10</span>.<span class="number">8</span>.<span class="number">0</span>.<span class="number">4</span>  <span class="number">255.255.255.252</span>         <span class="literal">On</span>-link          <span class="number">10.8.0.6</span>    <span class="number">281</span></span><br><span class="line">         <span class="attribute">10</span>.<span class="number">8</span>.<span class="number">0</span>.<span class="number">6</span>  <span class="number">255.255.255.255</span>         <span class="literal">On</span>-link          <span class="number">10.8.0.6</span>    <span class="number">281</span></span><br><span class="line">         <span class="attribute">10</span>.<span class="number">8</span>.<span class="number">0</span>.<span class="number">7</span>  <span class="number">255.255.255.255</span>         <span class="literal">On</span>-link          <span class="number">10.8.0.6</span>    <span class="number">281</span></span><br></pre></td></tr></table></figure><p>其中前面两行就是内网和外网的路由信息，上面需要输入的信息就是Gateway列的192.168.8.1和10.8.0.5<br></p><p>至此配置完成，就可以成功连接外网啦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;购买腾讯云服务器：&lt;a href=&quot;https://blog.csdn.net/SoloVersion/article/details/123854852?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168</summary>
      
    
    
    
    <category term="AI" scheme="http://caixuya.github.io/categories/AI/"/>
    
    
  </entry>
  
  <entry>
    <title>批处理小工具</title>
    <link href="http://caixuya.github.io/2022/12/28/%E6%89%B9%E5%A4%84%E7%90%86%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://caixuya.github.io/2022/12/28/%E6%89%B9%E5%A4%84%E7%90%86%E5%B0%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2022-12-28T09:29:00.000Z</published>
    <updated>2022-12-28T11:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>原因：写这个批处理的原因是：在测试手机包的时候遇到bug需要截图&#x2F;录视频&#x2F;拿log上传到bug单，由于每次都<br>需要再手机上截下来然后传到电脑，再从电脑下载下来进行处理后上传，次数不多的时候感觉倒还好，次数一多<br>起来，这么操作感觉费时间还麻烦，我就想着有没有一种办法可以直接在电脑截手机的图，如此便省去了传来传<br>去的麻烦。于是我想到了批处理。<br><br>网上有很多关于批处理的教程，有一键截屏，一键录屏，一键拉取log的，其本质都是用的adb，有一点点adb的基<br>础就可以轻松完成这三个的批处理，我便不再赘述，这里放上我的代码方便自己日后取用。我写这个工具是可以用就行，因此除了功<br>能代码以外，没有做其他任何优化，略简单一些。<br></p><h6 id="一键截屏（非原创）"><a href="#一键截屏（非原创）" class="headerlink" title="一键截屏（非原创）"></a>一键截屏（非原创）</h6><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@ECHO off</span><br><span class="line"><span class="keyword">set</span> Str=快速截屏至电脑_V2.0_20170829 by <span class="comment">HRD</span></span><br><span class="line">title <span class="comment">%Str%</span></span><br><span class="line">ECHO       <span class="comment">%Str%</span></span><br><span class="line">ECHO 等待<span class="comment">Android</span>设备插入<span class="comment">...</span></span><br><span class="line">ECHO <span class="comment">wait-for-device</span></span><br><span class="line">adb <span class="comment">wait-for-device</span></span><br><span class="line">ECHO <span class="comment">Start...</span></span><br><span class="line">ECHO 已识别到<span class="comment">Android</span>设备<span class="comment">...</span></span><br><span class="line">ECHO 正在截图中，请稍候<span class="comment">...</span></span><br><span class="line">adb <span class="comment">shell screencap -p</span> /sdcard/<span class="comment">screenshot.png</span></span><br><span class="line">ECHO.[手机截屏成功]</span><br><span class="line">ECHO 正在将截图复制到<span class="comment">PC</span>，请稍候<span class="comment">...</span></span><br><span class="line">adb <span class="comment">pull</span> /sdcard/<span class="comment">screenshot.png  C:</span>/Users/千羽/Desktop/<span class="comment">screencap</span></span><br><span class="line">ECHO 复制到<span class="comment">pc</span>成功</span><br><span class="line">ECHO 正在修改名字，请稍后<span class="comment">...</span></span><br><span class="line">ren <span class="comment">C:\Users\</span>千羽<span class="comment">\Desktop\screencap\screenshot.png</span> <span class="comment">&quot;%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%%time:~6,2%.png&quot;</span> </span><br><span class="line">ECHO 修改名字成功，正在删除手机中的截图，请稍后<span class="comment">...</span></span><br><span class="line">adb <span class="comment">shell rm</span> /sdcard/<span class="comment">screenshot.png</span></span><br><span class="line">ECHO 删除手机截图成功</span><br><span class="line">ECHO 截图成功</span><br><span class="line">timeout /t <span class="number">2</span></span><br><span class="line">echo <span class="number">2</span>s后退出</span><br></pre></td></tr></table></figure><p>这个是我当时在搜adb截屏命令的时候搜出来的，具体是哪几篇博文我已经忘了，所以我只能标明是非原创，无法注明出处<br><br>这个虽然也很精简，但是比起我最初的想法更佳完善，有几个点是我当时没有想到的，我的想法是能截图就行，原本我打<br>算一行代码完事，但是后来查了很多个博主的代码，发现其实这个也可以写得很复杂很完善，不禁感叹他们把事情做到细致完美的能力<br><br>在结合了几篇博文的代码以后，去掉一些我认为不必要的东西，然后在复制粘贴的基础上修改后，就变成了上面这个代码的模样<br><br>再精简一下，其实只有几行命令，分别是：<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb wait-<span class="keyword">for</span>-device</span><br><span class="line">adb shell screencap -p <span class="regexp">/sdcard/</span>screenshot.png</span><br><span class="line">adb pull <span class="regexp">/sdcard/</span>screenshot.png  C:<span class="regexp">/Users/</span>千羽<span class="regexp">/Desktop/</span>screencap</span><br><span class="line">ren C:\Users\千羽\Desktop\screencap\screenshot.png <span class="string">&quot;%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%%time:~6,2%.png&quot;</span> </span><br><span class="line">adb shell rm <span class="regexp">/sdcard/</span>screenshot.png</span><br><span class="line">timeout /t <span class="number">2</span></span><br></pre></td></tr></table></figure><ol><li>等待连接adb命令（这个命令在做这个批处理前我并不知道有这个命令，是在搜索过程中看到别人在用，然后特地去查了一下才发现的这个命令，算是一个意外的收获）<br></li><li>截图命令：这里是执行截图命令后将图片保存在手机中<br></li><li>pull命令：将截图从手机中传输到电脑中<br></li><li>ren重命名命令：这个命令是属于批处理的命令，不是adb命令，也是我在搜索过程中的另一个收获，我在找到这个命令之前甚至没有想过要给文件重命名，想着直接性图<br>片覆盖旧图片就好了，但是其实如果在需要连续截图的时候，或者截多张图片的时候，新图片覆盖旧图片的方式就会显得有点麻烦了，所以即使当时在重命名这条命令上掉了<br>坑，还是花了不少闲时把它搞好的。<br><br>这里记录一下这个坑：当时我搜索出来的命令是：<br><br><code>ren C:\Users\千羽\Desktop\screencap\screenshot.png &quot;%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%%time:~6,2%&quot;.png </code><br>这条命令无论我怎么修改输出，它都说参数格式不正确，我当时的注意力是放在原文件名和新文件名上，以为这两个的格式不对，所以一直在修改这俩个文件名字，但是无论<br>我当时尝尽任何方法，都提示说参数格式不正确。没有办法，我只能选择排除法，首先上网查找资料，ren命令的格式是什么样子的，<code>ren 路径\旧文件名 新文件名</code>，这么看<br>来，可以排除是ren命令格式的问题。然后我看向后面的新文件名，这串是以时间来命名的命令，当时看见这串命令的时候毫无违和感，感觉就应该是这样的，直到我把这行代码<br><br><code>&quot;%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%%time:~6,2%&quot;</code><br><br>改成123，也就是把新文件的名字改成123.png，然后执行命令成功时，我瞬间反应过来，是双引号引早了，双引号应该要把.png包括在内，难怪一直提示参数格式不正确。至此，这个坑填完了。</li><li>删除截图命令：这个命令也是我之前没考虑到的地方，及时删除不需要的文件释放内存，我觉得这是一种很好的代码习惯和代码意识，这也是一个收获。<h6 id="一键录屏（非原创）"><a href="#一键录屏（非原创）" class="headerlink" title="一键录屏（非原创）"></a>一键录屏（非原创）</h6>录屏和截屏原理都是一样的，只是adb命令稍有不同而已，这里不再啰嗦，直接记录一下代码<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@ECHO off</span><br><span class="line"><span class="keyword">set</span> Str=快速录屏至电脑_V2.0_20170829 by <span class="comment">HRD</span></span><br><span class="line">title <span class="comment">%Str%</span></span><br><span class="line">ECHO       <span class="comment">%Str%</span></span><br><span class="line">ECHO 等待<span class="comment">Android</span>设备插入<span class="comment">...</span></span><br><span class="line">ECHO <span class="comment">wait-for-device</span></span><br><span class="line">adb <span class="comment">wait-for-device</span></span><br><span class="line">ECHO <span class="comment">Start...</span></span><br><span class="line">ECHO 已识别到<span class="comment">Android</span>设备<span class="comment">...</span></span><br><span class="line">ECHO 正在录屏中，请稍候<span class="comment">...</span></span><br><span class="line">adb <span class="comment">shell screenrecord</span> /sdcard/<span class="comment">screenrecord.mp4</span></span><br><span class="line">ECHO.[手机录频完成]</span><br><span class="line">ECHO 正在将录屏复制到<span class="comment">PC</span>，请稍候<span class="comment">...</span></span><br><span class="line">adb <span class="comment">pull</span> /sdcard/<span class="comment">screenrecord.mp4 C:</span>/Users/千羽/Desktop/<span class="comment">screenrecord</span></span><br><span class="line">ECHO 复制到<span class="comment">pc</span>成功</span><br><span class="line">ECHO 正在修改名字，请稍后<span class="comment">...</span></span><br><span class="line">ren <span class="comment">C:\Users\</span>千羽<span class="comment">\Desktop\screenrecord\screenrecord.mp4</span> <span class="comment">&quot;%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%%time:~6,2%.mp4&quot;</span> </span><br><span class="line">ECHO 修改名字成功，正在删除手机中的录屏，请稍后<span class="comment">...</span></span><br><span class="line">adb <span class="comment">shell rm</span> /sdcard/<span class="comment">screenrecord.mp4</span></span><br><span class="line">ECHO 删除手机录屏成功</span><br><span class="line">ECHO 截图成功</span><br><span class="line">timeout /t <span class="number">2</span></span><br><span class="line">echo <span class="number">2</span>s后退出</span><br></pre></td></tr></table></figure>######拉最新的视频文件（半原创，参考了bat脚本—for循环结合adb命令的格式）<br>因为adb的录屏只能录取三分钟的视频，但有的时候录屏会比较长，超过三分钟的视频该怎么办呢，我当时想的办法时，先用手机自带录屏软件录制下来，然后用adb拉去出来<br><br>这个时候又有一个新的问题，手机中视频文件太多的时候怎么办，难不成要全部都拉到电脑或者把非bug的视频都删掉吗，如果是测试机的话当然把非当前bug的视频删掉是可以的，<br>当时如果是自己正在用的手机如此操作显然行不通，那怎么办呢，我想到可以利用时间排序的方式，获取最新的那几个，于是写了代码如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@setlocal</span> enabledelayedexpansion</span><br><span class="line"><span class="variable">@ECHO</span> off</span><br><span class="line">for /f <span class="string">&quot;delims=&quot;</span> %%i in (<span class="string">&#x27;adb shell ls -r /sdcard/DCIM/Screenshots/*.mp4&#x27;</span>) do (</span><br><span class="line">adb pull %%i <span class="attribute">C</span>:/Users/千羽/Desktop/new_screenrecord</span><br><span class="line">    )</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></li></ol><h6 id="一键拉取log"><a href="#一键拉取log" class="headerlink" title="一键拉取log"></a>一键拉取log</h6><p>拉日志的adb命令是：<code>adb logcat &gt;E:/temp/log.txt.</code>,这行命令过后，开始进行操作获取日志信息，获取完毕后，按ctrl+c结束命令就可以拉到log啦</p><p>这里over啦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原因：写这个批处理的原因是：在测试手机包的时候遇到bug需要截图&amp;#x2F;录视频&amp;#x2F;拿log上传到bug单，由于每次都&lt;br&gt;需要再手机上截下来然后传到电脑，再从电脑下载下来进行处理后上传，次数不多的时候感觉倒还好，次数一多&lt;br&gt;起来，这么操作感觉费时间还麻烦，</summary>
      
    
    
    
    <category term=".bat" scheme="http://caixuya.github.io/categories/bat/"/>
    
    
  </entry>
  
  <entry>
    <title>将hexo博客部署到手机的nginx服务器中</title>
    <link href="http://caixuya.github.io/2022/10/29/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%89%8B%E6%9C%BA%E7%9A%84nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://caixuya.github.io/2022/10/29/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%89%8B%E6%9C%BA%E7%9A%84nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-10-29T11:36:50.000Z</published>
    <updated>2022-10-29T11:51:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>接第一章—在手机搭建nginx服务器</p><h2 id="一-在手机搭建nginx服务器"><a href="#一-在手机搭建nginx服务器" class="headerlink" title="一. 在手机搭建nginx服务器"></a>一. <a href="https://caixuya.github.io/2022/10/28/%E5%9C%A8%E6%89%8B%E6%9C%BA%E6%90%AD%E5%BB%BAnginx%E6%9C%8D%E5%8A%A1%E5%99%A8/">在手机搭建nginx服务器</a></h2><h2 id="二-进阶-把博客部署到nginx"><a href="#二-进阶-把博客部署到nginx" class="headerlink" title="二. 进阶 把博客部署到nginx"></a>二. 进阶 把博客部署到nginx</h2><h3 id="8-将hexo博客部署到手机的nginx服务器中"><a href="#8-将hexo博客部署到手机的nginx服务器中" class="headerlink" title="8.将hexo博客部署到手机的nginx服务器中"></a>8.将hexo博客部署到手机的nginx服务器中<br></h3><p>如何搭建hexo博客在我的另一篇博文里，附上连接<a href="https://caixuya.github.io/2020/04/10/linux%E5%92%8Cwindows%E7%AB%AF%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%EF%BC%8C%E9%83%A8%E7%BD%B2%E5%88%B0github%EF%BC%8C%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D%E4%B8%80%E6%9D%A1%E9%BE%99%E6%95%99%E7%A8%8B%EF%BC%8C%E9%99%84%E4%B8%8A%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">搭建hexo博客</a><br></p><blockquote><h4 id="8-1-安装vim"><a href="#8-1-安装vim" class="headerlink" title="8.1 安装vim"></a>8.1 安装vim<br></h4><p>输入命令<code>pkg install vim</code><br></p><h4 id="8-2-把hexo的项目传到手机中"><a href="#8-2-把hexo的项目传到手机中" class="headerlink" title="8.2 把hexo的项目传到手机中"></a>8.2 把hexo的项目传到手机中<br></h4><p>具体步骤是先压缩hexo项目（或者直接压缩hexo项目下的public文件夹）然后用蓝牙传到手机（我的手机太旧了没办法用usb连接电脑直接拉，如果有usb连接电脑直接拉的话会简单一点）<br><br>然后找到传过来的压缩文件，用命令解压缩，解压缩网上有教程，我这里就不赘述了<br></p><h4 id="8-3-找到hexo所在的位置"><a href="#8-3-找到hexo所在的位置" class="headerlink" title="8.3 找到hexo所在的位置"></a>8.3 找到hexo所在的位置<br></h4><p>这里找了一下地址是：<code>/storage/shared/Download/Bluetooth/hexo</code><br></p><h4 id="8-4-找到nginx-conf"><a href="#8-4-找到nginx-conf" class="headerlink" title="8.4 找到nginx.conf"></a>8.4 找到nginx.conf<br></h4><p>如果直接用<code>apt -y install nginx</code>这条命令安装nginx的话，配置文件大概率是在<code>/data/data/com.termux/files/usr/etc/nginx/nginx.conf</code><br></p><h4 id="8-5-找到nginx主目录"><a href="#8-5-找到nginx主目录" class="headerlink" title="8.5 找到nginx主目录"></a>8.5 找到nginx主目录<br></h4><h5 id="8-5-1-输入命令查看路径"><a href="#8-5-1-输入命令查看路径" class="headerlink" title="8.5.1 输入命令查看路径"></a>8.5.1 输入命令查看路径<br></h5><p><code>pkg files nginx</code><br></p><h5 id="8-5-2-找主目录的原因："><a href="#8-5-2-找主目录的原因：" class="headerlink" title="8.5.2 找主目录的原因："></a>8.5.2 找主目录的原因：<br></h5><p>为什么要找这个nginx主目录呢，因为需要把hexo的public文件夹全部复制到nginx主目录下，也就是和nginx的html文件夹同级目录下，然后把nginx.conf的路径由html改成public就可以啦，原理就是把原本nginx的html文件夹换成我想让它显示的html文件夹<br></p><h5 id="8-5-3-找到nginx主目录"><a href="#8-5-3-找到nginx主目录" class="headerlink" title="8.5.3 找到nginx主目录"></a>8.5.3 找到nginx主目录<br></h5><p>如果直接用<code>apt -y install nginx</code>这条命令安装nginx的话，主目录大概率是在<code>/data/data/com.termux/files/usr/share/nginx</code><br><br>如果不确定的话，可以cd到这个路径下，命令是：<code>cd /data/data/com.termux/files/usr/share/nginx</code>，使用<code>ls</code>命令查看一下，此时发现会有一个html文件夹<br><br><code>cd</code>到html文件夹中<code>cd html</code>，然后用<code>ls</code>命令继续查看，发现里面有两个文件，分别是<code>50x.html</code>和<code>index.html</code>，这样就可以确定刚才找到的主目录路径没有错了<br></p><h4 id="8-6-复制"><a href="#8-6-复制" class="headerlink" title="8.6 复制"></a>8.6 复制<br></h4><p>将public文件夹整个复制到nginx主目录下：<code>cp -r /storage/shared/Download/Bluetooth/hexo/public /data/data/com.termux/files/usr/share/nginx</code><br></p><h4 id="8-7-改配置文件"><a href="#8-7-改配置文件" class="headerlink" title="8.7 改配置文件"></a>8.7 改配置文件<br></h4><h5 id="8-7-1-打开配置文件"><a href="#8-7-1-打开配置文件" class="headerlink" title="8.7.1 打开配置文件"></a>8.7.1 打开配置文件<br></h5><p>这里用到的路径是步骤8.4中找到的路径，使用命令<code>vim /data/data/com.termux/files/usr/etc/nginx/nginx.conf</code><br></p><h5 id="8-7-2-修改配置文件的路径"><a href="#8-7-2-修改配置文件的路径" class="headerlink" title="8.7.2 修改配置文件的路径"></a>8.7.2 修改配置文件的路径<br></h5><p>打开配置文件后，找到server，在server的大括号里找到location，在location中找到root,这个时候看到root后面的路径是&#x2F;data&#x2F;data&#x2F;com.termux&#x2F;files&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html，把最后面的html改成public，其他不要动，注意不要把最后面的分号删掉了<br></p><h5 id="8-7-3-保存修改"><a href="#8-7-3-保存修改" class="headerlink" title="8.7.3 保存修改"></a>8.7.3 保存修改</h5><p>按下键盘的&#96;&#96;esc<code>键，或者点击手机的</code>esc<code>按钮，然后输入命令</code>:wq&#96;保存并退出</p><h5 id="8-8-重启nginx"><a href="#8-8-重启nginx" class="headerlink" title="8.8 重启nginx"></a>8.8 重启nginx</h5><p>nginx -s reload</p><h5 id="8-9-成功"><a href="#8-9-成功" class="headerlink" title="8.9 成功"></a>8.9 成功</h5><p>手机在浏览器输入地址：<code>192.168.92.62:8080</code>成功跳转到博客中</p><h5 id="我悟了"><a href="#我悟了" class="headerlink" title="我悟了"></a>我悟了</h5><p>这个时候我知道为什么我之前失败那么多次了，每一次连接手机wifi的时候ip地址默认是动态的，所以我输入之前的获取的ip地址是没有用的，也是犯了一个很基础的错误吧，一个乌龙搞了这么久，拿时间买了一个教训，干巴爹<br></p><h5 id="9-设置固定ip"><a href="#9-设置固定ip" class="headerlink" title="9. 设置固定ip"></a>9. 设置固定ip</h5><p>连接wifi的手机设置固定IP的方法：打开设置，进入WLAN，长按连接的WIFI，进入修改网络，进入IP，勾选静态，修改IP地址后，保存即可。参考连接：<a href="https://jingyan.baidu.com/article/72ee561a463248a06138dfa6.html">手机热点怎么设置固定ip</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接第一章—在手机搭建nginx服务器&lt;/p&gt;
&lt;h2 id=&quot;一-在手机搭建nginx服务器&quot;&gt;&lt;a href=&quot;#一-在手机搭建nginx服务器&quot; class=&quot;headerlink&quot; title=&quot;一. 在手机搭建nginx服务器&quot;&gt;&lt;/a&gt;一. &lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="nginx" scheme="http://caixuya.github.io/categories/nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>在手机搭建nginx服务器</title>
    <link href="http://caixuya.github.io/2022/10/28/%E5%9C%A8%E6%89%8B%E6%9C%BA%E6%90%AD%E5%BB%BAnginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://caixuya.github.io/2022/10/28/%E5%9C%A8%E6%89%8B%E6%9C%BA%E6%90%AD%E5%BB%BAnginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2022-10-28T02:45:36.000Z</published>
    <updated>2022-10-29T11:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博文参考网站：<a href="https://www.bilibili.com/read/cv13930032">https://www.bilibili.com/read/cv13930032</a><br></p><p>起因：某一天刷抖音的时候看到可以在手机上搭建nginx服务器，觉得很好玩，就在网上搜了教程试了一下，遇到了一些坑，这里记录一下自己的解决思路和解决方法，方便自己日后查看<br></p><h2 id="一-在手机搭建nginx服务器"><a href="#一-在手机搭建nginx服务器" class="headerlink" title="一. 在手机搭建nginx服务器"></a>一. 在手机搭建nginx服务器</h2><h3 id="1-按照教程走"><a href="#1-按照教程走" class="headerlink" title="1.按照教程走"></a>1.按照教程走<br></h3><blockquote><p>发现安装完nginx后，浏览器无法打开<code>127.0.0.1:8080</code> <br></p></blockquote><h3 id="2-检查问题"><a href="#2-检查问题" class="headerlink" title="2.检查问题"></a>2.检查问题<br></h3><blockquote><p>在termux中输入<code>nginx -V</code> ，发现报错：CANNOT LINK EXECUTABLE “nginx”:library “libssl.so.3” not found aborted<br><br>网上查找相关资料，发现没有对应的解决办法<br></p></blockquote><h3 id="3-开始各种尝试"><a href="#3-开始各种尝试" class="headerlink" title="3.开始各种尝试"></a>3.开始各种尝试<br></h3><blockquote><h4 id="3-1-首先获取存储权限"><a href="#3-1-首先获取存储权限" class="headerlink" title="3.1 首先获取存储权限"></a>3.1 首先获取存储权限<br></h4><p>输入<code>termux-setup-storage</code><br></p><h4 id="3-2-然后换源"><a href="#3-2-然后换源" class="headerlink" title="3.2 然后换源"></a>3.2 然后换源<br></h4><p>输入<code>termux-change-repo</code><br><br>步骤是：输入命令后，按空格键（蓝牙键盘）选择需要更换的仓库，按回车键确定；然后按空格键选择需要更换的源，按回车键确定。<br></p><h4 id="3-3-更新包"><a href="#3-3-更新包" class="headerlink" title="3.3 更新包"></a>3.3 更新包<br></h4><p>先输入<code>apt update</code>，然后输入<code>apt upgrade</code><br></p></blockquote><h3 id="4-解决问题"><a href="#4-解决问题" class="headerlink" title="4.解决问题"></a>4.解决问题<br></h3><blockquote><p>做完以上尝试后，再次执行<code>nginx -V</code>，发现报错不见了，并且正确显示了版本号，至此问题解决<br></p></blockquote><h3 id="5-新的问题接踵而至"><a href="#5-新的问题接踵而至" class="headerlink" title="5.新的问题接踵而至"></a>5.新的问题接踵而至<br></h3><blockquote><p>当我兴冲冲地区浏览器输入地址<code>127.0.0.1:8080</code>时，发现还是无法打开该页面，我突然想到刚才资料说不用手动去开启，因为一般安装完都会自动开启的，但是抱着试一下的心态，还是尝试输入<code>nginx</code>这条开启nginx的命令，输入后发现问题解决，nice~<br></p></blockquote><h3 id="6-查看ip"><a href="#6-查看ip" class="headerlink" title="6.查看ip"></a>6.查看ip<br></h3><blockquote><p>我这里是做服务器的这台手机连接另一部手机开的热点，连上热点后，做服务器的这台手机输入命令查看ip,命令是：<code>ifconfig</code><br></p></blockquote><h3 id="7-成功搭建nginx服务器"><a href="#7-成功搭建nginx服务器" class="headerlink" title="7.成功搭建nginx服务器"></a>7.成功搭建nginx服务器<br></h3><blockquote><p>在做服务器的这台手机的浏览器中输入ip:8080，即<code>192.168.92.62:8080</code>，成功跳转到nginx界面<br></p></blockquote><p>搭建nginx服务器完成<br></p><h2 id="二-进阶-把博客部署到nginx"><a href="#二-进阶-把博客部署到nginx" class="headerlink" title="二. 进阶 把博客部署到nginx"></a>二. <a href="https://caixuya.github.io/2022/10/29/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E6%89%8B%E6%9C%BA%E7%9A%84nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/">进阶 把博客部署到nginx</a></h2><p>做完这一切，突然有一个想法，之前把自己的博客部署到买的服务器上面，经常要花钱，后来就放弃了，只部署到github上面。<br><br>突然想到现在既然已经部署了一个nginx服务器了，要不就顺带把博客部署到服务器上面吧，说干就干，开始找教程。<br><br>但是经过多次尝试还是失败了，没找到原因，磕磕绊绊地弄了一天，决定还是用最原始的办法，把hexo博客目录下的整个public复制到nginx主目录下去，再次进行尝试。<br></p><h3 id="10-卸载nginx"><a href="#10-卸载nginx" class="headerlink" title="10.卸载nginx"></a>10.卸载nginx<br></h3><p>参考连接<a href="http://t.zoukankan.com/smlile-you-me-p-11404110.html">Ubuntu16.04使用apt安装完nginx常见问题</a><br></p><blockquote><p>在实行进阶版本的时候，失败了很多次，经历了很多次卸载重新搭建nginx的情况，这里也记录一下卸载的步骤吧<br></p><h4 id="10-1-错误尝试"><a href="#10-1-错误尝试" class="headerlink" title="10.1 错误尝试"></a>10.1 错误尝试<br></h4><p>在输入<code>pkg files nginx</code>这个命令找到所有nginx文件夹的路径后，我尝试使用一个个文件夹删除的办法，但是后来一想，linux有<code>remove</code>命令可以用来卸载，那termix是否也有这类命令呢<br></p><h4 id="10-2-正确尝试"><a href="#10-2-正确尝试" class="headerlink" title="10.2 正确尝试"></a>10.2 正确尝试<br></h4><h5 id="10-2-1-尝试输入卸载命令"><a href="#10-2-1-尝试输入卸载命令" class="headerlink" title="10.2.1 尝试输入卸载命令"></a>10.2.1 尝试输入卸载命令<br></h5><p><code>pkg remove nginx</code>(或者是这条命令：<code>apt remove nginx</code>) ，当它提示yes or not时，我明白我输入的命令是对的<br></p><h5 id="10-2-2-卸载更彻底一些"><a href="#10-2-2-卸载更彻底一些" class="headerlink" title="10.2.2 卸载更彻底一些"></a>10.2.2 卸载更彻底一些<br></h5><p>再执行两个卸载命令：<code>apt autoremove nginx</code><br><code>apt --purge remove nginx</code><br></p><h5 id="10-2-3-报错"><a href="#10-2-3-报错" class="headerlink" title="10.2.3 报错"></a>10.2.3 报错<br></h5><p>此时报错说有一个文件夹因为不是空的所以没有卸载<br></p><h5 id="10-2-4-根据报错内容删除文件夹"><a href="#10-2-4-根据报错内容删除文件夹" class="headerlink" title="10.2.4 根据报错内容删除文件夹"></a>10.2.4 根据报错内容删除文件夹<br></h5><p>使用删除命令<code>rm -rf /data/data/com.termux/files/usr/var/log/nginx</code><br></p><h5 id="10-2-5-验证上一步操作是否解决问题"><a href="#10-2-5-验证上一步操作是否解决问题" class="headerlink" title="10.2.5 验证上一步操作是否解决问题"></a>10.2.5 验证上一步操作是否解决问题<br></h5><p>再次执行导致报错的命令，<code>apt --purge remove nginx</code><br></p></blockquote><p>完成<br></p><h3 id="11-安装nginx"><a href="#11-安装nginx" class="headerlink" title="11. 安装nginx"></a>11. 安装nginx<br></h3><blockquote><p>之所以在文章的最后记录如何安装nginx，是因为这个安装教程网上很多，本来是不想记录下来的，但是因为多次失败导致需要多次安装卸载nginx，所以还是决定写下来方便自己等会直接用<br></p><h4 id="11-1-安装命令"><a href="#11-1-安装命令" class="headerlink" title="11.1 安装命令"></a>11.1 安装命令<br></h4><p>输入命令<code>apt -y install nginx</code><br></p></blockquote><p>完成<br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇博文参考网站：&lt;a href=&quot;https://www.bilibili.com/read/cv13930032&quot;&gt;https://www.bilibili.com/read/cv13930032&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;起因：某一天刷抖音的时候看到可以在手机上搭</summary>
      
    
    
    
    <category term="nginx" scheme="http://caixuya.github.io/categories/nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo的cname记录怎么永远设置</title>
    <link href="http://caixuya.github.io/2022/06/04/hexo%E7%9A%84cname%E8%AE%B0%E5%BD%95%E6%80%8E%E4%B9%88%E6%B0%B8%E8%BF%9C%E8%AE%BE%E7%BD%AE/"/>
    <id>http://caixuya.github.io/2022/06/04/hexo%E7%9A%84cname%E8%AE%B0%E5%BD%95%E6%80%8E%E4%B9%88%E6%B0%B8%E8%BF%9C%E8%AE%BE%E7%BD%AE/</id>
    <published>2022-06-04T07:32:09.000Z</published>
    <updated>2022-10-30T17:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>前提：已经设置好github的page和弄好域名解析<br><br>具体教程：<a href="https://caixuya.github.io/2020/04/10/linux%E5%92%8Cwindows%E7%AB%AF%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%EF%BC%8C%E9%83%A8%E7%BD%B2%E5%88%B0github%EF%BC%8C%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D%E4%B8%80%E6%9D%A1%E9%BE%99%E6%95%99%E7%A8%8B%EF%BC%8C%E9%99%84%E4%B8%8A%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">搭建hexo博客</a><br><br>然后是这两步<br><br>1.在blog目录下敲下面这条命令，每一次在生成blog的时候，都会生成一个cname的文件，<br><br><code>npm install hexo-generator-cname --save</code><br>2.在hexo博客主目录的_config.yml文件中最末尾新开一行，添加这句代码<br><br><code>Plugins: hexo-generator-cname</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前提：已经设置好github的page和弄好域名解析&lt;br&gt;&lt;br&gt;具体教程：&lt;a href=&quot;https://caixuya.github.io/2020/04/10/linux%E5%92%8Cwindows%E7%AB%AF%E6%90%AD%E5%BB%BAhexo</summary>
      
    
    
    
    <category term="hexo" scheme="http://caixuya.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>匿名函数lambda</title>
    <link href="http://caixuya.github.io/2022/05/06/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0lambda/"/>
    <id>http://caixuya.github.io/2022/05/06/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0lambda/</id>
    <published>2022-05-06T15:26:25.000Z</published>
    <updated>2022-05-06T15:26:50.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"><span class="comment"># 上面这句等价于这句</span></span><br><span class="line"><span class="comment">#def g(x):</span></span><br><span class="line"><span class="comment">#    return x + 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无参数</span></span><br><span class="line">t = <span class="keyword">lambda</span>: <span class="literal">True</span></span><br><span class="line">wc = <span class="keyword">lambda</span>: <span class="string">&quot;这是一个无参的lambda&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个或多个参数</span></span><br><span class="line">b = <span class="keyword">lambda</span> x: x ** <span class="number">3</span></span><br><span class="line">c = <span class="keyword">lambda</span> x, y=<span class="number">3</span>: x * y</span><br><span class="line">cc = <span class="keyword">lambda</span> name, age: (name, age)</span><br><span class="line">a = <span class="keyword">lambda</span> x, y, z: x + y + z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不定长参数</span></span><br><span class="line">d = <span class="keyword">lambda</span> *z: <span class="built_in">sum</span>(z) / <span class="built_in">len</span>(z)</span><br><span class="line"><span class="comment"># *z为不定长参数，可以输入多个参数，没有固定长度，可用于求取平均值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 键值对参数</span></span><br><span class="line">e = <span class="keyword">lambda</span> **arg: arg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回多个表达式（需要将表达式用元组或列表的方式返回）</span></span><br><span class="line">dg = <span class="keyword">lambda</span> a, b: (a * b, a + b, a // b, a / b, a % b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#map函数</span></span><br><span class="line">li = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(t())</span><br><span class="line">    <span class="built_in">print</span>(wc())</span><br><span class="line">    <span class="built_in">print</span>(g(<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(b(<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;sum = &#x27;</span>, a(<span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#可以直接在print中用f-string输出，其中:.2f表示显示小数点后两位</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;梯形 = <span class="subst">&#123;(<span class="keyword">lambda</span> tx, tk, h: (tx + tk) * h / <span class="number">2</span>)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#可以直接输出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])))  <span class="comment"># 1</span></span><br><span class="line">    <span class="comment">#也可以在上面定义</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(li))</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(cc(age=<span class="number">25</span>, name=<span class="string">&quot;小明&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(c(<span class="number">8</span>))</span><br><span class="line">    <span class="built_in">print</span>(d(<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(e(yellow=<span class="number">1</span>, blue=<span class="number">2</span>))</span><br><span class="line">    <span class="built_in">print</span>(e(a=<span class="number">34</span>, b=<span class="number">56</span>))</span><br><span class="line">    <span class="built_in">print</span>(dg(<span class="number">10</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="python" scheme="http://caixuya.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>测试方法之改表测试</title>
    <link href="http://caixuya.github.io/2022/05/06/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E4%B9%8B--%E6%94%B9%E8%A1%A8%E6%B5%8B%E8%AF%95/"/>
    <id>http://caixuya.github.io/2022/05/06/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E4%B9%8B--%E6%94%B9%E8%A1%A8%E6%B5%8B%E8%AF%95/</id>
    <published>2022-05-06T15:26:25.000Z</published>
    <updated>2022-05-06T15:26:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要改表测试：</p><p>1.检查配置表中的字段是否生效</p><p>2.测试“环境配置”</p><p>举例：抽奖得抽100次以后，也就是第101次数才能抽到，为了测试方便，把100次改成10次</p><p>3.权重测试</p><p>举例：同样是抽奖的，改成10次后，担心改了抽奖次数后，概率变高，所以把概率调成0，变成必须让这个奖励在第11次抽到</p><p>4.容错：配置空白</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为什么要改表测试：&lt;/p&gt;
&lt;p&gt;1.检查配置表中的字段是否生效&lt;/p&gt;
&lt;p&gt;2.测试“环境配置”&lt;/p&gt;
&lt;p&gt;举例：抽奖得抽100次以后，也就是第101次数才能抽到，为了测试方便，把100次改成10次&lt;/p&gt;
&lt;p&gt;3.权重测试&lt;/p&gt;
&lt;p&gt;举例：同样是抽奖的，改成</summary>
      
    
    
    
    <category term="测试" scheme="http://caixuya.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>“返回函数”、“闭包”、“nonlocal”关键字</title>
    <link href="http://caixuya.github.io/2022/05/06/%E8%BF%94%E5%9B%9E%E5%87%BD%E6%95%B0/"/>
    <id>http://caixuya.github.io/2022/05/06/%E8%BF%94%E5%9B%9E%E5%87%BD%E6%95%B0/</id>
    <published>2022-05-06T15:26:25.000Z</published>
    <updated>2022-05-06T15:26:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">    fs = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">return</span> i * i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> g <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    fs.append(f(g))</span><br><span class="line"><span class="keyword">return</span> fs</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例子的延申：</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">    fs = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">return</span> i * i</span><br><span class="line">    <span class="keyword">return</span> f()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">    fs.append(g(k))</span><br><span class="line"><span class="keyword">return</span> fs</span><br></pre></td></tr></table></figure><h3 id="“闭包”和“nonlocal”关键词"><a href="#“闭包”和“nonlocal”关键词" class="headerlink" title="“闭包”和“nonlocal”关键词"></a>“闭包”和“nonlocal”关键词</h3><p>闭包：就是能够读取其他函数内部变量的函数，其实就是内层函数引用了外层函数的局部变量，可以理解为“定义在一个函数内部的函数”，本质上，闭包是将函数内部和函数外部连接起来的桥梁。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inc</span>():</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fn</span>():</span><br><span class="line">        <span class="comment"># 仅读取x的值:</span></span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    f = inc()</span><br><span class="line">    <span class="built_in">print</span>(f())  <span class="comment"># 打印出来的结果是：1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果只是读外层变量的值，我们会发现返回的闭包函数调用一切正常，但是，如果对外层变量赋值，由于Python解释器会把<code>x</code>当作函数<code>fn()</code>的局部变量，它会报错，这个时候，用nonlocal关键词定义一下内部函数的x，即初始化内部的x，就像外层函数给x定义，赋初始值x&#x3D;0一样，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inch</span>():</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fn</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x = x + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    f = inch()</span><br><span class="line">    <span class="built_in">print</span>(f())  <span class="comment"># 打印出来的结果是:1</span></span><br><span class="line">    <span class="built_in">print</span>(f())  <span class="comment"># 打印出来的结果是:2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;返回函数&quot;&gt;&lt;a href=&quot;#返回函数&quot; class=&quot;headerlink&quot; title=&quot;返回函数&quot;&gt;&lt;/a&gt;返回函数&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="python" scheme="http://caixuya.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>列表生成式</title>
    <link href="http://caixuya.github.io/2022/04/25/%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
    <id>http://caixuya.github.io/2022/04/25/%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/</id>
    <published>2022-04-24T17:59:25.000Z</published>
    <updated>2022-04-24T17:14:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>列表中，比较少用的是列表生成式，之前用的一直是比较常规的方式，所以列表生成式这种比较简便的方式在这里做个记录，方便以后自己反复查看</p><h4 id="1-使用函数range创建数字列表"><a href="#1-使用函数range创建数字列表" class="headerlink" title="1.使用函数range创建数字列表"></a>1.使用函数range创建数字列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list1</span>():<span class="comment"># 列表生成式</span></span><br><span class="line">    numbers = []</span><br><span class="line">    numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(numbers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list2</span>():</span><br><span class="line">    num = []</span><br><span class="line">    num = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    list1()</span><br><span class="line">    list2()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出结果为:</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]      <span class="function"><span class="keyword">#</span><span class="title">list1</span><span class="params">()</span></span>的输出结果</span><br><span class="line">0 1 2 3 4 5 6 7 8 9  <span class="function"><span class="keyword">#</span><span class="title">list2</span><span class="params">()</span></span>的输出结果</span><br></pre></td></tr></table></figure><p>如果要生成<code>[1x1, 2x2, 3x3, ..., 10x10]</code>这种形式的话，可以用常规的方式：遍历数组中的数，让数组中的数相乘，如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_chen</span>():</span><br><span class="line">    L = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        L.append(x * x)</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    _chen()</span><br></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果为：</span><br><span class="line"><span class="string">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure><p>用列表生成式的方法做就是：把要生成的元素（以上面的例子为例：要生成的元素是<code>x * x</code>）放在前面,后面跟<code>for</code>循环，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_chen_list</span>():<span class="comment"># 列表生成式</span></span><br><span class="line">    L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    _chen_list()</span><br></pre></td></tr></table></figure><p>输出结果和上面的常规方法输出的结果一样：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果为：</span><br><span class="line"><span class="string">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure><h4 id="2-列表生成式-if"><a href="#2-列表生成式-if" class="headerlink" title="2.列表生成式 + if"></a>2.列表生成式 + if</h4><p>跟在<code>for</code>后面的<code>if</code>是一个筛选条件，不能带<code>else</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_chen_list</span>():</span><br><span class="line">    L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    _chen_list()</span><br></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果为：</span><br><span class="line"><span class="string">[4, 16, 36, 64, 100]</span></span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_chen_</span>():</span><br><span class="line">    L = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            x_all = x * x</span><br><span class="line">            L.append(x_all)</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    _chen_()</span><br></pre></td></tr></table></figure><h4 id="3-列表生成式-if-…-else"><a href="#3-列表生成式-if-…-else" class="headerlink" title="3.列表生成式 + if ….else"></a>3.列表生成式 + if ….else</h4><p><code>if</code>写在<code>for</code>前面必须加<code>else</code>,因为<code>for</code>前面的部分是一个表达式，它必须根据<code>x</code>计算出一个结果</p><p>如下这条表达式，<code>x if x % 2 == 0</code>，它无法根据<code>x</code>计算出结果，因为缺少<code>else</code>，必须加上<code>else</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_ruguo</span>():</span><br><span class="line">    L = [x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> -x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    _ruguo()</span><br></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果为：</span><br><span class="line">[<span class="string">-1</span>, 2, <span class="string">-3</span>, 4, <span class="string">-5</span>, 6, <span class="string">-7</span>, 8, <span class="string">-9</span>, 10]</span><br></pre></td></tr></table></figure><p>这个的效果就相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ru_guo</span>():</span><br><span class="line">    L = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            x1 = x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x1 = -x</span><br><span class="line">        L.append(x1)</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ru_guo()</span><br></pre></td></tr></table></figure><h4 id="4-两层循环，生成全排列"><a href="#4-两层循环，生成全排列" class="headerlink" title="4.两层循环，生成全排列"></a>4.两层循环，生成全排列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pai_lie</span>():</span><br><span class="line">    L = [m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line">    W = [m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;123&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;456&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(W)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># pai_lie()函数等价于qing_xi()，但是并不是完全等价，pai_lie这个函数输出来以后是一个列表，如下输出结果4.1所示</span></span><br><span class="line"><span class="comment">#而qing_xi函数输出来的是一个一个单独的，如下图输出结果4.2所示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qing_xi</span>():</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;456&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(m + n)</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pai_lie()</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果<span class="number">4.1</span></span><br><span class="line"><span class="selector-attr">[<span class="string">&#x27;14&#x27;</span>, <span class="string">&#x27;15&#x27;</span>, <span class="string">&#x27;16&#x27;</span>, <span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;26&#x27;</span>, <span class="string">&#x27;34&#x27;</span>, <span class="string">&#x27;35&#x27;</span>, <span class="string">&#x27;36&#x27;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输出结果4.2</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td></tr></table></figure><p>如果想和pai_lie完全一样，还应该定义一个空的列表，将(m+n)放进列表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">qing_xi</span>():</span><br><span class="line">    L = []</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;456&#x27;</span>:</span><br><span class="line">            L.append(m+n)</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    qing_xi()</span><br></pre></td></tr></table></figure><h4 id="5-例题："><a href="#5-例题：" class="headerlink" title="5.例题："></a>5.例题：</h4><p>题目：有L1列表如下：L1 &#x3D; [‘Hello’, ‘World’, 18, ‘Apple’, None]，列表中有数字有字符（字符有大写有小写）有空值，现要求输出成[‘hello’, ‘world’, ‘apple’]。用<code>lower</code> 函数将将所有字母都转换成小写，用<code>isinstance</code>函数判断一个变量是不是字符串。编写代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_li_ti</span>():</span><br><span class="line">    L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">    L1 = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="literal">None</span>]</span><br><span class="line">    L2 = [x.lower() <span class="keyword">for</span> x <span class="keyword">in</span> L1 <span class="keyword">if</span> <span class="built_in">isinstance</span>(x, <span class="built_in">str</span>) <span class="keyword">is</span> <span class="literal">True</span>]</span><br><span class="line">    <span class="built_in">print</span>(L2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    _li_ti()</span><br></pre></td></tr></table></figure><p>另一种形式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_instance</span>():</span><br><span class="line">    L = []</span><br><span class="line">    L1 = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="literal">None</span>]</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> L1:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(s, <span class="built_in">str</span>) <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            L.append(s.lower())</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    is_instance()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;列表中，比较少用的是列表生成式，之前用的一直是比较常规的方式，所以列表生成式这种比较简便的方式在这里做个记录，方便以后自己反复查看&lt;/p&gt;
&lt;h4 id=&quot;1-使用函数range创建数字列表&quot;&gt;&lt;a href=&quot;#1-使用函数range创建数字列表&quot; class=&quot;head</summary>
      
    
    
    
    <category term="python" scheme="http://caixuya.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>生成器</title>
    <link href="http://caixuya.github.io/2022/04/25/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>http://caixuya.github.io/2022/04/25/%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2022-04-24T17:59:25.000Z</published>
    <updated>2022-04-24T17:14:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是generator"><a href="#1-什么是generator" class="headerlink" title="1. 什么是generator"></a>1. 什么是generator</h3><p>列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的，如果创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>如果可以先不创建完整的list，而是先创建一个东西，使得这个东西可以在循环的过程中计算出后面的元素，这样可以节省大量的空间。这个一边循环一边计算的机制，成为生成器：generator</p><h3 id="2-创建generator"><a href="#2-创建generator" class="headerlink" title="2. 创建generator"></a>2. 创建generator</h3><h4 id="lt-1-gt-第一种方法：把列表生成式的-改成"><a href="#lt-1-gt-第一种方法：把列表生成式的-改成" class="headerlink" title="&lt;1&gt; 第一种方法：把列表生成式的[]改成()"></a>&lt;1&gt; 第一种方法：把列表生成式的[]改成()</h4><p>这里可以看到，函数gen_ner只是把gen_list最外层的[]改成了()，结果就是L是一个list，而g是一个generator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_list</span>():</span><br><span class="line">    L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br><span class="line"><span class="comment">#gen_list的输出结果为：</span></span><br><span class="line"><span class="comment">#[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  </span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_ner</span>():</span><br><span class="line">    g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(g)</span><br><span class="line"><span class="comment">#gen_ner()的输出结果为：</span></span><br><span class="line"><span class="comment">#&lt;generator object gen_ner.&lt;locals&gt;.&lt;genexpr&gt; at 0x000002245435B970&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    gen_list()</span><br><span class="line">    gen_ner()</span><br></pre></td></tr></table></figure><p>从上面的结果可以看到，generator是一个对象，如何打印出放在里面的元素呢，可以一个一个用next()打印，不过用next的话有一个缺点是，需要不断地调用next去计算g的下一个元素（next(g)），这种方法不能指定需要的那个元素，而且在没有更多元素的时候，会抛出StopIteration的错误。</p><p>那么更便捷的方法是什么呢？用for循环打印：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_ner</span>():</span><br><span class="line">    g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    gen_ner()</span><br></pre></td></tr></table></figure><h5 id="2-1-例子（斐波拉契数列）"><a href="#2-1-例子（斐波拉契数列）" class="headerlink" title="2.1 例子（斐波拉契数列）"></a>2.1 例子（斐波拉契数列）</h5><p>著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：</p><p>1, 1, 2, 3, 5, 8, 13, 21, 34, …</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    fib(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">执行结果是：</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">13</span><br><span class="line">21</span><br></pre></td></tr></table></figure><p>其中：a, b &#x3D; b, a + b为赋值语句，相当于：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">t</span> = (b, a + b) <span class="comment"># t是一个tuple</span></span><br><span class="line"><span class="attr">a</span> = t[<span class="number">0</span>]</span><br><span class="line"><span class="attr">b</span> = t[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>但不必显式写出临时变量t就可以赋值，也就是说，<code>a, b = b, a + b</code>这句话的意思是：把a赋值给b，把b赋值给a+b。t只是作为一个中间变量出现，不用中间变量的时候可以直接赋值。</p><p><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/%E7%94%9F%E6%88%90%E5%99%A81.png" alt="image-20220424192351161"></p><h5 id="2-2-斐波拉契数列类似generator"><a href="#2-2-斐波拉契数列类似generator" class="headerlink" title="2.2  斐波拉契数列类似generator"></a>2.2  斐波拉契数列类似generator</h5><p>斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator，也就是”2.1 例子（斐波拉契数列）“的函数和generator仅一步之遥。要把<code>fib</code>函数变成generator函数，只需要把<code>print(b)</code>改为<code>yield b</code>就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    f = fib(<span class="number">8</span>)<span class="comment">#调用generator对象</span></span><br><span class="line">    <span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行的结果是：</span><br><span class="line">&lt;generator object <span class="built_in">fib</span> <span class="built_in">at</span> <span class="number">0x000001EAE925B970</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="3-generator函数的执行顺序"><a href="#3-generator函数的执行顺序" class="headerlink" title="3. generator函数的执行顺序"></a>3. generator函数的执行顺序</h3><p>普通函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。</p><p>generator的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行，例子如下：</p><p>先定义一个generator函数，依次返回数字1,3,5:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">odd</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 1&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 3&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>调用该generator函数时，首先要生成一个generator对象，然后用<code>next()</code>函数不断获得下一个返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>o = odd()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(o)</span><br><span class="line">step <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(o)</span><br><span class="line">step <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(o)</span><br><span class="line">step <span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(o)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>可以看到，<code>odd</code>不是普通函数，而是generator函数，在执行过程中，遇到<code>yield</code>就中断，下次又继续执行。执行3次<code>yield</code>后，已经没有<code>yield</code>可以执行了，所以，第4次调用<code>next(o)</code>就报错。</p><p>我们在循环过程中不断调用<code>yield</code>，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。</p><p>同样的，把函数改成generator函数后，我们基本上从来不会用<code>next()</code>来获取下一个返回值，而是直接使用<code>for</code>循环来迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">odd</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 1&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 3&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> odd():</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">结果是：</span><br><span class="line">step <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">step <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">step <span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>但是用<code>for</code>循环调用generator时，发现拿不到generator的<code>return</code>语句的返回值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">odd</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 1&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 2&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;step 3&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    g = odd()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            x = <span class="built_in">next</span>(g)</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">        <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Generator return value:&#x27;</span>, e.value)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-什么是generator&quot;&gt;&lt;a href=&quot;#1-什么是generator&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是generator&quot;&gt;&lt;/a&gt;1. 什么是generator&lt;/h3&gt;&lt;p&gt;列表生成式，我们可以直接创建一个列表。但</summary>
      
    
    
    
    <category term="python" scheme="http://caixuya.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>cpu</title>
    <link href="http://caixuya.github.io/2022/04/09/cpu%E8%AE%B0%E5%BD%95/"/>
    <id>http://caixuya.github.io/2022/04/09/cpu%E8%AE%B0%E5%BD%95/</id>
    <published>2022-04-09T11:59:25.000Z</published>
    <updated>2022-04-14T15:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个用python写的获取单个手机游戏cpu利用率和内存占用的情况，最后用matplotlib绘图工具画曲线图，这里主要记录一下在python中调用.sh文件的一种思路，把.sh文件push到手机（模拟器）中，然后调用adb命令执行.sh文件，具体看push_shell()函数和execute_shell()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys.path.append(os.path.join(os.path.dirname(__file__), &#x27;util&#x27;))</span></span><br><span class="line"><span class="comment"># from util import execute_cmd, time_couter</span></span><br><span class="line">shell_file = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取包名</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">package_name</span>():</span><br><span class="line">    hq_list = []</span><br><span class="line">    cmd = <span class="string">&#x27;adb shell dumpsys window | findstr mCurrentFocus&#x27;</span></span><br><span class="line">    huo_qu = os.popen(cmd).read()</span><br><span class="line">    hq_list = re.split(<span class="string">r&#x27;[, /]&#x27;</span>, huo_qu)</span><br><span class="line">    pack_name = hq_list[<span class="number">4</span>]</span><br><span class="line">    <span class="keyword">return</span> pack_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取进程号</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_pid</span>():</span><br><span class="line">    cmd = <span class="string">&#x27;adb shell ps | findstr &#x27;</span> + package_name() + <span class="string">&#x27;$&#x27;</span></span><br><span class="line">    huo_qu = os.popen(cmd).read()</span><br><span class="line">    hq_list = huo_qu.split()</span><br><span class="line">    ap_pid = hq_list[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;进程号:&quot;</span> + ap_pid)</span><br><span class="line">    <span class="keyword">return</span> ap_pid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把shell文件push到手机</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push_shell</span>():</span><br><span class="line">    <span class="comment"># main文件在C:/Users/Administrator/PycharmProjects/pythonProject123/pythonProject/main.py中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># os.path.dirname,去掉文件名，返回目录;返回的是C:\Users\Administrator\PycharmProjects\pythonProject123\pythonProject</span></span><br><span class="line"></span><br><span class="line">    cur_dir = os.path.dirname(__file__)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># os.path.join,追加路径;C:\Users\Administrator\PycharmProjects\pythonProject123\pythonProject\huo_qu.sh</span></span><br><span class="line"></span><br><span class="line">    shell = os.path.join(cur_dir, <span class="string">&quot;huo_qu.sh&quot;</span>)</span><br><span class="line">    cmd = <span class="string">&quot;adb push &quot;</span> + shell + <span class="string">&quot; /sdcard&quot;</span></span><br><span class="line">    subprocess.Popen(cmd, shell=<span class="literal">True</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># execute_cmd(&quot;adb push &quot; + shell + &quot; /sdcard&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行shell文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_shell</span>(<span class="params">ap_pid</span>):</span><br><span class="line">    push_shell()</span><br><span class="line">    res_list = []</span><br><span class="line">    cmd = <span class="string">&quot;adb shell sh /sdcard/huo_qu.sh &quot;</span> + ap_pid</span><br><span class="line">    res_str = subprocess.Popen(cmd, shell=<span class="literal">True</span>, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    result = res_str.stdout.read()</span><br><span class="line">    res_list = result.split()</span><br><span class="line">    <span class="comment"># res_fin = int(res_list[1])</span></span><br><span class="line">    <span class="comment"># print(res_list)</span></span><br><span class="line">    <span class="keyword">return</span> res_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cpu_list</span>(<span class="params">res</span>):</span><br><span class="line">    cpu_add = <span class="number">0</span></span><br><span class="line">    singer_add = <span class="number">0</span></span><br><span class="line">    cpu_all = res[<span class="number">1</span>:<span class="number">11</span>]</span><br><span class="line">    cpu_singer = res[<span class="number">24</span>:<span class="number">28</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        cpu_add = <span class="built_in">int</span>(cpu_all[i]) + cpu_add</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        singer_add = <span class="built_in">int</span>(cpu_singer[p]) + singer_add</span><br><span class="line">    <span class="keyword">return</span> cpu_add, singer_add</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_pss</span>(<span class="params">res</span>):</span><br><span class="line">    pss_all = <span class="built_in">int</span>(res[-<span class="number">5</span>])</span><br><span class="line">    <span class="keyword">return</span> pss_all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dot</span>():</span><br><span class="line">    <span class="comment"># 这里是分割数据到数组，然后绘图的过程</span></span><br><span class="line">    cpu_all = []</span><br><span class="line">    cpu_singer = []</span><br><span class="line">    cpu_all_add_cha = []</span><br><span class="line">    cpu_singer_add_cha = []</span><br><span class="line">    pss_add_list = []</span><br><span class="line">    cpu = []</span><br><span class="line">    i_list = []</span><br><span class="line">    cpu_all_fin = <span class="number">0</span></span><br><span class="line">    cpu_singer_fin = <span class="number">0</span></span><br><span class="line">    cpu_chu = <span class="number">0</span></span><br><span class="line">    pid = app_pid()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建figure画布对象</span></span><br><span class="line">    figure = plt.figure()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>):</span><br><span class="line">        res = execute_shell(pid)</span><br><span class="line">        pss = app_pss(res)</span><br><span class="line">        cpu_all.append(cpu_list(res)[<span class="number">0</span>])</span><br><span class="line">        cpu_singer.append(cpu_list(res)[<span class="number">1</span>])</span><br><span class="line">        pss_add_list.append(pss)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            cpu_all_fin = <span class="number">0</span></span><br><span class="line">            cpu_singer_fin = <span class="number">0</span></span><br><span class="line">            cpu_chu = <span class="number">0</span></span><br><span class="line">            cpu_all_add_cha.append(cpu_all_fin)</span><br><span class="line">            cpu_singer_add_cha.append(cpu_singer_fin)</span><br><span class="line">            cpu.append(cpu_chu)</span><br><span class="line">        <span class="keyword">elif</span> i &gt;= <span class="number">1</span>:</span><br><span class="line">            cpu_all_fin = cpu_all[i] - cpu_all[i - <span class="number">1</span>]</span><br><span class="line">            cpu_singer_fin = cpu_singer[i] - cpu_singer[i - <span class="number">1</span>]</span><br><span class="line">            cpu_all_add_cha.append(cpu_all_fin)</span><br><span class="line">            cpu_singer_add_cha.append(cpu_singer_fin)</span><br><span class="line">            cpu_chu = cpu_singer_add_cha[i] / cpu_all_add_cha[i]</span><br><span class="line">            cpu.append(cpu_chu)</span><br><span class="line">        i_list.append(i)</span><br><span class="line">        <span class="built_in">print</span>(pss_add_list)</span><br><span class="line">        <span class="built_in">print</span>(cpu)</span><br><span class="line">    <span class="built_in">print</span>(pss_add_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画图</span></span><br><span class="line"></span><br><span class="line">    x = i_list</span><br><span class="line">    y = cpu</span><br><span class="line">    y1 = pss_add_list</span><br><span class="line"></span><br><span class="line">    ax1 = figure.add_subplot(<span class="number">221</span>)</span><br><span class="line">    ax2 = figure.add_subplot(<span class="number">223</span>)</span><br><span class="line"></span><br><span class="line">    ax1.plot(x, y)</span><br><span class="line">    ax2.plot(x, y1)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dot()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.sh文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pid=$1</span><br><span class="line">cat /proc/stat | grep cpu[^0-9]</span><br><span class="line">cat /proc/$&#123;pid&#125;/stat</span><br><span class="line">dumpsys meminfo $&#123;pid&#125; | grep TOTAL:</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一个用python写的获取单个手机游戏cpu利用率和内存占用的情况，最后用matplotlib绘图工具画曲线图，这里主要记录一下在python中调用.sh文件的一种思路，把.sh文件push到手机（模拟器）中，然后调用adb命令执行.sh文件，具体看push_shell</summary>
      
    
    
    
    <category term="python" scheme="http://caixuya.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>函数的调用</title>
    <link href="http://caixuya.github.io/2022/04/09/python/"/>
    <id>http://caixuya.github.io/2022/04/09/python/</id>
    <published>2022-04-09T11:59:25.000Z</published>
    <updated>2022-04-24T17:13:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是学习总结，学习网站是廖雪峰网站，连接在这：<a href="https://www.liaoxuefeng.com/" title="廖雪峰的官方网站">https://www.liaoxuefeng.com/</a><br></p><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用<br></h2><h3 id="一：函数的调用"><a href="#一：函数的调用" class="headerlink" title="一：函数的调用"></a>一：函数的调用<br></h3><h6 id="lt-1-gt-普通函数调用"><a href="#lt-1-gt-普通函数调用" class="headerlink" title="&lt;1&gt;普通函数调用"></a>&lt;1&gt;普通函数调用<br></h6><pre><code>def enroll(name, gender):    print(&#39;name:&#39;, name)    print(&#39;gender:&#39;, gender)def main():    enroll(&#39;sarah&#39;, &#39;F&#39;)if __name__ == &quot;__main__&quot;:    main()</code></pre><p>输出是这个样子的：<br></p><pre><code>name: sarahgender: F</code></pre><h6 id="lt-2-gt-调用数组"><a href="#lt-2-gt-调用数组" class="headerlink" title="&lt;2&gt;调用数组"></a>&lt;2&gt;调用数组<br></h6><pre><code>def calc():    global nums               #先定义一个全局变量    nums = [1, 2, 3]       #然后把数组赋值给变量def main():    calc()    print(nums[0], nums[1], nums[2])if __name__ == &quot;__main__&quot;:    main()</code></pre><h3 id="二：设置默认参数"><a href="#二：设置默认参数" class="headerlink" title="二：设置默认参数"></a>二：设置默认参数<br></h3><p>定义一个enroll函数，它的参数有name,gender,age,city<br></p><pre><code>def enroll(name, gender, age=6, city=&#39;Beijing&#39;):    print(&#39;name:&#39;, name)    print(&#39;gender:&#39;, gender)    print(&#39;age:&#39;, age)    print(&#39;city:&#39;, city)</code></pre><p>定义完函数后，在主函数调用，一个是默认参数调用，一个是更改默认参数调用<br></p><h6 id="lt-1-gt-当age-和city与默认参数相同时，不需要再设置"><a href="#lt-1-gt-当age-和city与默认参数相同时，不需要再设置" class="headerlink" title="&lt;1&gt;当age 和city与默认参数相同时，不需要再设置"></a>&lt;1&gt;当<code>age</code> 和<code>city</code>与默认参数相同时，不需要再设置<br></h6><pre><code>def main():    enroll(&#39;sarah&#39;, &#39;F&#39;)if __name__ == &quot;__main__&quot;:    main()</code></pre><p>输出结果为：<br></p><pre><code>name: sarahgender: Fage: 6city: Beijing</code></pre><h6 id="lt-2-gt-当与默认参数不符时，提供值覆盖默认参数值："><a href="#lt-2-gt-当与默认参数不符时，提供值覆盖默认参数值：" class="headerlink" title="&lt;2&gt;当与默认参数不符时，提供值覆盖默认参数值："></a>&lt;2&gt;当与默认参数不符时，提供值覆盖默认参数值：<br></h6><pre><code>def main():    enroll(&#39;sarah&#39;, &#39;F&#39;, 7)                   #按顺序可以不写参数名    enroll(&#39;Adam&#39;, &#39;M&#39;, city=&#39;TianJin&#39;)       #不按顺序要写参数名</code></pre><h5 id="lt-3-gt-默认参数需要设置成不变的对象（重要）"><a href="#lt-3-gt-默认参数需要设置成不变的对象（重要）" class="headerlink" title="&lt;3&gt;默认参数需要设置成不变的对象（重要）"></a>&lt;3&gt;默认参数需要设置成不变的对象（重要）<br></h5><p>错误例子：<br></p><pre><code>def add_end(L=[]):    L.append(&#39;END&#39;)    print(L)    return Ldef main():    add_end([1, 2, 3])    add_end([&#39;x&#39;, &#39;y&#39;, &#39;z&#39;])    add_end()    add_end()    add_end()if __name__ == &quot;__main__&quot;:    main()</code></pre><p>输出结果：<br></p><pre><code>[1, 2, 3, &#39;END&#39;][&#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;END&#39;][&#39;END&#39;][&#39;END&#39;, &#39;END&#39;][&#39;END&#39;, &#39;END&#39;, &#39;END&#39;]</code></pre><p>从结果中可以看到：当调用函数时传参了，显示的结果是正确的。但是如果直接调用，不传入参数，那数组就会记录上一个数组的值，从而导致结果累加，如结果第三，四，五条所示。<br></p><p>正确例子1：<br></p><pre><code>def add_end(L = []):    #也可以让L等于None 即def add_end(L = None):    if L == []:            #这里同样要改成None 即if L == None:              L = []    #这里必须是L = []，因为这里是当if满足条件的时候，L的值，这里应该定义L的值，而不能用L=None，会报AttributeError    L.append(&#39;END&#39;)    print(L)    return Ldef main():    add_end([1, 2, 3])    add_end([&#39;x&#39;, &#39;y&#39;, &#39;z&#39;])    add_end()    add_end()    add_end()if __name__ == &quot;__main__&quot;:    main()</code></pre><p>输出结果：<br></p><pre><code>[1, 2, 3, &#39;END&#39;][&#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;END&#39;][&#39;END&#39;][&#39;END&#39;][&#39;END&#39;]</code></pre><p>除此以外，还可以在错误例子的基础上改主函数，不过有点麻烦，每一个都要改，好处就是可以选择哪些要像错误例子里面那样，把结果叠加起来的，哪些不想把结果叠加起来的，代码如下：<br><br>正确例子2：<br></p><pre><code>def add_end(L=[]):    L.append(&#39;END&#39;)    print(L)    return Ldef main():    add_end([1, 2, 3])    add_end([&#39;x&#39;, &#39;y&#39;, &#39;z&#39;])    add_end([])    add_end([])    add_end([])    print(&quot;-------------这是一条分割线&quot;)    add_end()    add_end()    add_end()if __name__ == &quot;__main__&quot;:    main()</code></pre><p>输出结果：<br></p><pre><code>[1, 2, 3, &#39;END&#39;][&#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;END&#39;][&#39;END&#39;][&#39;END&#39;][&#39;END&#39;]-------------这是一条分割线[&#39;END&#39;][&#39;END&#39;, &#39;END&#39;][&#39;END&#39;, &#39;END&#39;, &#39;END&#39;]</code></pre><p>以上输出结果可以看到，当在调用函数的时候，每次调用函数都传空数组，相当于重置数组的初始值，所以得到的结果是正确的，如果啥都不传，直接调用，数据就会叠加<br></p><h3 id="三：可变参数"><a href="#三：可变参数" class="headerlink" title="三：可变参数"></a>三：可变参数<br></h3><p>可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个<br></p><h6 id="lt-1-gt-主函数–没有元素、单个元素或者多个元素传入"><a href="#lt-1-gt-主函数–没有元素、单个元素或者多个元素传入" class="headerlink" title="&lt;1&gt;主函数–没有元素、单个元素或者多个元素传入"></a>&lt;1&gt;主函数–没有元素、单个元素或者多个元素传入<br></h6><pre><code>def calc(*numbers):        #这里的*表示把number改成可变参数，让函数传入的参数个数是可变的。    sum = 0    for number in numbers:        sum = sum + number * number        #这里是number乘number    print(sum)    return sumdef main():    calc(1, 2, 3)    calc(2, 3)    calc()if __name__ == &quot;__main__&quot;:    main()</code></pre><p>输出结果为：<br></p><pre><code>14130</code></pre><p>如果不把calc函数的参数变成可变参数，那么在主函数中调用的时候就要先组装出一个list或者tuple，如下所示<br></p><pre><code>def calc(numbers):    sum = 0    for number in numbers:        sum = sum + number * number    print(sum)    return sumdef main():    calc([1, 2, 3])        #或calc((1, 2, 3))if __name__ == &quot;__main__&quot;:    main()</code></pre><p>输出结果为：<br></p><pre><code>14</code></pre><h6 id="lt-2-gt-主函数–数组元素传入"><a href="#lt-2-gt-主函数–数组元素传入" class="headerlink" title="&lt;2&gt;主函数–数组元素传入"></a>&lt;2&gt;主函数–数组元素传入<br></h6><pre><code>def calc(*numbers):    sum = 0    for number in numbers:        sum = sum + number * number    print(sum)    return sumdef main():    nums = [1, 2, 3]    calc(*nums)         # calc(nums[0], nums[1], nums[2])这种方式也可以，只是比较麻烦if __name__ == &quot;__main__&quot;:    main()</code></pre><p>输出结果为：<br></p><pre><code>14</code></pre><h6 id="lt-3-gt-关键字参数"><a href="#lt-3-gt-关键字参数" class="headerlink" title="&lt;3&gt;关键字参数"></a>&lt;3&gt;关键字参数<br></h6><p>关键字参数的作用是：如下代码所示：name和age是必填参数，**kw是选填参数<br></p><pre><code>def person(name, age, **kw):            #形参前加&#39;*&#39;和&#39;**&#39;表示动态形参    print(&#39;name:&#39;, name, &#39;age:&#39;, age, &#39;other:&#39;, **kw)def main():    person(&#39;Michael&#39;, 30, city=&#39;Beijing&#39;)if __name__ == &quot;__main__&quot;:    main()</code></pre><p>输出结果为：<br></p><pre><code>name: Michael age: 30 other: &#123;&#39;city&#39;: &#39;Beijing&#39;&#125;</code></pre><h6 id="lt-4-gt"><a href="#lt-4-gt" class="headerlink" title="&lt;4&gt;"></a>&lt;4&gt;<br></h6>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是学习总结，学习网站是廖雪峰网站，连接在这：&lt;a href=&quot;https://www.liaoxuefeng.com/&quot; title=&quot;廖雪峰的官方网站&quot;&gt;https://www.liaoxuefeng.com/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;函数调用&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="python" scheme="http://caixuya.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>递归函数--递归、尾递归</title>
    <link href="http://caixuya.github.io/2022/04/09/%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/"/>
    <id>http://caixuya.github.io/2022/04/09/%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</id>
    <published>2022-04-09T11:59:25.000Z</published>
    <updated>2022-04-14T15:39:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="递归函数–递归，尾递归"><a href="#递归函数–递归，尾递归" class="headerlink" title="递归函数–递归，尾递归"></a>递归函数–递归，尾递归</h3><p>函数在内部可以调用其他函数，也可以自己调用自己，自己调用自己的函数叫递归函数。<br></p><p>例子一：<br><br>如：<br></p><pre><code>pythondef fact(n):    if n==1:        return 1             #n * fact(n-1)中，当n=1时(n-1)=0，为了避免n=1时出错，直接让n=1时返回1    return n * fact(n-1)</code></pre><p>假设这里n&#x3D;5,即 def fact(5)：<br></p><p>这个函数的执行过程是：先调用fact函数的返回值：n * fact(n-1)<br></p><p>fact(5) &#x3D;&#x3D;&gt;n * fact(n-1)，&#x3D;&#x3D;&gt; 5 * fact(5 - 1) &#x3D;&#x3D;&gt; 5 * fact(4)<br></p><p>这里fact（4）再次调用fact函数，即将算式中的fact(4)替换成返回值<br></p><p>fact(4) &#x3D;&#x3D;&gt;n * fact(n-1)，&#x3D;&#x3D;&gt;5 * (4 * fact(4 - 1)) &#x3D;&#x3D;&gt; 5 * (4 * fact(3))<br></p><p>以此类推，直到算式中没有fact()函数<br></p><p>fact(3) &#x3D;&#x3D;&gt;n * fact(n-1)，&#x3D;&#x3D;&gt;5 * (4 * (3 * fact(3-1))) &#x3D;&#x3D;&gt; 5 * (4 * (3 * fact(2)))<br></p><p>fact(2) &#x3D;&#x3D;&gt;n * fact(n-1)，&#x3D;&#x3D;&gt;5 * (4 * (3 * (2 * fact(2-1)))) &#x3D;&#x3D;&gt; 5 * (4 * (3 * (2 * fact(1))))<br></p><p>fact(1) &#x3D;&#x3D;&gt;n * fact(n-1)，&#x3D;&#x3D;&gt;5 * (4 * (3 * (2 * (2-1)))) &#x3D;&#x3D;&gt; 5 * (4 * (3 * (2 * fact(1))))<br></p><p>n &#x3D; 1的是时，return 1 ，所以最终是：5 * (4 * fact(3 * fact(2 * 1)))<br></p><p>因此fact(1) &#x3D;&#x3D;&gt;n * fact(n-1)，&#x3D;&#x3D;&gt;5 * (4 * (3 * (2 * (2-1)))) &#x3D;&#x3D;&gt; 5 * (4 * (3 * (2 * 1)))<br></p><p>即 5 * 4 * 3 * 2 * 1 &#x3D; 5!&#x3D;120<br></p><p>例子二：<br><br>尾递归<br></p><pre><code>def fact(n):    print(fact_iter(n, 1))    return fact_iter(n, 1)def fact_iter(num, product):    if num == 1:        return product                    #在这里打印可以看到递归（循环）的次数    return fact_iter(num - 1, num * product)if __name__ == &quot;__main__&quot;:    fact(3)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;递归函数–递归，尾递归&quot;&gt;&lt;a href=&quot;#递归函数–递归，尾递归&quot; class=&quot;headerlink&quot; title=&quot;递归函数–递归，尾递归&quot;&gt;&lt;/a&gt;递归函数–递归，尾递归&lt;/h3&gt;&lt;p&gt;函数在内部可以调用其他函数，也可以自己调用自己，自己调用自己的函数叫</summary>
      
    
    
    
    <category term="python" scheme="http://caixuya.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>多表连接查询、SQL函数、分组聚合</title>
    <link href="http://caixuya.github.io/2020/11/18/%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E3%80%81SQL%E5%87%BD%E6%95%B0%E3%80%81%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88/"/>
    <id>http://caixuya.github.io/2020/11/18/%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E3%80%81SQL%E5%87%BD%E6%95%B0%E3%80%81%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88/</id>
    <published>2020-11-17T16:10:03.000Z</published>
    <updated>2022-04-14T15:41:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.xieyihui.top/">友情链接</a></p><h2 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h2><p>  功能：同时查询多张表里的数据<br><br>  种类：<code>inner join</code>,<code>left join</code>,<code>right join</code><br></p><table><thead><tr><th align="center">连接方式</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">inner join</td><td align="center">显示两张表中，符合连接条件的记录。</td></tr><tr><td align="center">left join</td><td align="center">左表显示所有记录；右表只显示符合连接条件的记录。</td></tr><tr><td align="center">right join</td><td align="center">右表显示所有记录；左表只显示符合连接条件的记录。</td></tr></tbody></table><ul><li><strong>inner join（内连接）</strong><br>  功能：显示两张表中，符合连接条件的记录。<br><ul><li><strong>命令格式：</strong> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> 字段清单(表名.字段名), …. <span class="keyword">From</span> 表A</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> 表B<span class="comment">--连接方式：inner join 交集</span></span><br><span class="line"><span class="keyword">on</span> 表A.共有字段<span class="operator">=</span>表B.共有字段<span class="comment">--连接条件</span></span><br></pre></td></tr></table></figure></li><li><strong>inner join查询的步骤</strong></li></ul><p>1.列出要查的字段清单，以 表名.字段名 的形式列在 Select后面。<br><br>2.数一数两张表种，哪张表要查的字段更多，出字段多的表，放在from后面；出字段少的表，放在inner join后面。<br><br>3.两张表的共有属性用等号连接，放在on后面，作为连接条件。<br></p></li><li><strong>Left join (左连接)</strong><br>  功能：左表显示所有记录；右表只显示符合连接条件的记录。<br><ul><li><strong>命令格式：</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span>  字段清单(表名.字段名), …. <span class="keyword">From</span> 表A</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> 表B<span class="comment">--连接方式 </span></span><br><span class="line"><span class="keyword">on</span> 表A.共有字段<span class="operator">=</span>表B.共有字段<span class="comment">--连接条件</span></span><br></pre></td></tr></table></figure></li><li><strong>Left join查询的步骤</strong></li></ul><p>1.列出要查的字段清单，以 表名.字段名 的形式列在 Select后面。<br><br>2.观察两张表中，哪一张需要显示所有记录，要显示所有记录的表，放在 from后面。另一张表放在left join 后面。<br><br>3.两张表的共有属性用等号连接，放在on后面，作为连接条件。<br></p><h2 id="常用SQL函数"><a href="#常用SQL函数" class="headerlink" title="常用SQL函数"></a>常用SQL函数</h2><h3 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h3><p><code>to_char()</code>、<code>to_date()</code>、<code>to_number()</code></p></li><li><strong>to_char(X, 格式,NLS参数)</strong><br>  功能：将数据X（数值型或日期型），转成对应的字符串<br><br>  说明：数据X为要转换的数据；参数2为格式，可为空；参数3为NLS参数，可为空。<br><br>  返回：<code>字符串类型</code><br><ul><li><strong>数值型转字符串</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">to_char(<span class="number">1210</span>)                返回 <span class="string">&#x27;1234&#x27;</span></span><br><span class="line">to_char(<span class="number">1210.73</span>, <span class="string">&#x27;9999.9&#x27;</span>)   返回 <span class="string">&#x27;1210.7&#x27;</span></span><br><span class="line">to_char(<span class="number">1210.73</span>, <span class="string">&#x27;9,999.99&#x27;</span>) 返回 <span class="string">&#x27;1,210.73&#x27;</span></span><br><span class="line">to_char(<span class="number">21</span>, <span class="string">&#x27;000099&#x27;</span>)        返回 <span class="string">&#x27;000021&#x27;</span></span><br><span class="line">to_char(<span class="number">852</span>,<span class="string">&#x27;xxxx&#x27;</span>)          返回 <span class="string">&#x27;354&#x27;</span></span><br></pre></td></tr></table></figure></li><li><strong>日期型转字符串</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">to_char(sysdate,<span class="string">&#x27;dd&#x27;</span>)   <span class="comment">--取出几号</span></span><br><span class="line">to_char(sysdate,<span class="string">&#x27;mm&#x27;</span>)   <span class="comment">--取出月份 </span></span><br><span class="line">to_char(sysdate,<span class="string">&#x27;yyyy&#x27;</span>) <span class="comment">--取出年份</span></span><br><span class="line">to_char(sysdate,<span class="string">&#x27;ddd&#x27;</span>)  <span class="comment">--取出年中的第几天(1-366)</span></span><br><span class="line">to_char(sysdate,<span class="string">&#x27;ww&#x27;</span>)   <span class="comment">--取出第几周（1-53）</span></span><br><span class="line">to_char(sysdate,<span class="string">&#x27;q&#x27;</span>)    <span class="comment">--取出第几季度(1、2、3、4)</span></span><br><span class="line">to_char(sysdate,<span class="string">&#x27;d&#x27;</span>)    <span class="comment">--取出是周几（1-7）</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>to_date(字符串X, 格式说明, NLS参数)</strong><br>  功能：将字符串X转化为日期型<br><br>  说明：字符串X为要转换的数据；参数2为格式说明，可为空；参数3为NLS参数，可为空。<br><br>  返回：<code>日期型</code><br></li></ul><table><thead><tr><th align="center">函数</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">to_date(‘2020.09.14’,’yyyy.mm.dd’)</td><td align="center">2020&#x2F;09&#x2F;14</td></tr><tr><td align="center">to_date(‘20200914’,’yyyymmdd’)</td><td align="center">2020&#x2F;09&#x2F;14</td></tr><tr><td align="center">to_date(‘2020-09-14’,’yyyy-mm-dd’)</td><td align="center">2020&#x2F;09&#x2F;14</td></tr></tbody></table><ul><li><strong>to_number(字符串X)</strong><br>  功能：字符串转成数值类型<br><br>  返回：<code>number</code>类型<br></li></ul><table><thead><tr><th align="center">函数</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">to_number(‘1234’)</td><td align="center">1234</td></tr><tr><td align="center">to_number(‘123.45’)</td><td align="center">123.4</td></tr></tbody></table><h3 id="滤空函数"><a href="#滤空函数" class="headerlink" title="滤空函数"></a>滤空函数</h3><p>  背景：Oracle中，NULL + 任意数，结果都为NULL<br><br>这种情况与实际情况相违背。为了解决这个问题，Oracle提供了滤空函数。<br></p><ul><li><strong>nvl(表达示一, 表达式二)</strong><br>  功能：一空，则返回二。</li><li><strong>nvl2(表达式一, 表达式二, 表达式三)</strong><br>  功能：一空，则返回三；否则返回二。<h3 id="转换器函数-decode"><a href="#转换器函数-decode" class="headerlink" title="转换器函数 decode"></a>转换器函数 decode</h3>  表达式：(value1,output1,elseoutput)<br><br>  功能：输出转换。<br><br>  说明：当表达式的值为 value1时，返回output1，否则返回elseoutput。<br><h3 id="分析函数"><a href="#分析函数" class="headerlink" title="分析函数"></a>分析函数</h3>  功能：对一组查询结果进行运算，返回多行<br><br>  说明：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename,deptno,sal,</span><br><span class="line">  <span class="comment">--按照每个部门分组,对薪水从大到小排序,每个部门序号从1开始,同一个部门相同薪水序号相同,</span></span><br><span class="line">  <span class="comment">--且和下一条不同记录的排名之间空出排名</span></span><br><span class="line">  <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span>) &quot;RANK&quot;,</span><br><span class="line">  <span class="comment">--按照每个部门分组,对薪水从大到小排序,每个部门序号从1开始,同一个部门相同薪水序号相同,</span></span><br><span class="line">  <span class="comment">--且和下一条不同记录的排名之间不空出排名</span></span><br><span class="line">  <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span>) &quot;DENSE_RANK&quot;,</span><br><span class="line">  <span class="comment">--按照每个部门分组,对薪水从大到小排序,每个部门序号从1开始,同一个部门相同薪水序号继续</span></span><br><span class="line">  <span class="comment">--递增，顺序排名</span></span><br><span class="line">  <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span>) &quot;ROW_NUMBER&quot;</span><br><span class="line"> <span class="keyword">FROM</span> employee;</span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2></li></ul><p>  <strong>（1）常用的聚合函数：</strong><br><br>  sum:返回表达式中所有值的和<br><br>  avg:计算平均值<br><br>  min:返回表达式的最小值<br><br>  max:返回表达式的最大值<br><br>  count:返回组中项目的数量<br></p><p>  <strong>（2）特征：</strong><br>a.对一列值进行计算，并返回一个值<br>举例：<code>select min(sal) from employee</code><br>b.聚合函数经常与<code>group by</code>分组依据一起使用</p><ul><li><strong>（单列）分组聚合：</strong><ul><li><strong>命令格式：</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 分组依据, 聚合函数(列) <span class="keyword">from</span> 表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组依据</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>（多列）分组聚合：</strong><ul><li><strong>命令格式：</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 分组依据<span class="number">1</span>,分组依据<span class="number">2</span>,聚合函数(列) <span class="keyword">from</span> 表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组依据<span class="number">1</span>, 分组依据<span class="number">2</span></span><br></pre></td></tr></table></figure>c.聚合表达式可作为筛选条件。要求放在<code>group by</code>之后使用<code>having</code>聚合表达式 …. 构成筛选条件。</li></ul></li></ul><p>  <strong>命令格式：</strong><br>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 分组依据,聚合函数(列) <span class="keyword">from</span> 表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组依据</span><br><span class="line"><span class="keyword">having</span> 聚合函数(列) ….</span><br></pre></td></tr></table></figure></p><h1 id="练习习题"><a href="#练习习题" class="headerlink" title="练习习题"></a>练习习题</h1><h2 id="题1-显示所有员工的姓名、入职年度（hiredate中的YYYY部分）"><a href="#题1-显示所有员工的姓名、入职年度（hiredate中的YYYY部分）" class="headerlink" title="题1 显示所有员工的姓名、入职年度（hiredate中的YYYY部分）"></a>题1 显示所有员工的姓名、入职年度（hiredate中的YYYY部分）</h2><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,to_char(hiredate,<span class="string">&#x27;yyyy&#x27;</span>) <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure></p><h2 id="题2-显示入职日期在每个月最后一天的所有员工"><a href="#题2-显示入职日期在每个月最后一天的所有员工" class="headerlink" title="题2 显示入职日期在每个月最后一天的所有员工"></a>题2 显示入职日期在每个月最后一天的所有员工</h2><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">where</span> hiredate<span class="operator">=</span>last_day(hiredate);</span><br></pre></td></tr></table></figure></p><h2 id="题3-（分组聚合）列出每个部门的deptno-dname-员工总数"><a href="#题3-（分组聚合）列出每个部门的deptno-dname-员工总数" class="headerlink" title="题3 （分组聚合）列出每个部门的deptno,dname,员工总数"></a>题3 （分组聚合）列出每个部门的deptno,dname,员工总数</h2><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dept.deptno,dept.dname,<span class="built_in">count</span>(empno) 员工总数 <span class="keyword">from</span> dept</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> employee</span><br><span class="line"><span class="keyword">on</span> dept.deptno<span class="operator">=</span>employee.deptno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dept.deptno,dept.dname;</span><br></pre></td></tr></table></figure></p><h2 id="题4-（子查询）列出sal比SMITH-多的所有员工"><a href="#题4-（子查询）列出sal比SMITH-多的所有员工" class="headerlink" title="题4 （子查询）列出sal比SMITH 多的所有员工"></a>题4 （子查询）列出sal比SMITH 多的所有员工</h2><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">where</span> sal<span class="operator">&gt;</span></span><br><span class="line">(<span class="keyword">select</span> sal <span class="keyword">from</span> employee <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;SMITH&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h2 id="题5-（连接查询）列出岗位（job）为clerk的员工的姓名、部门名称"><a href="#题5-（连接查询）列出岗位（job）为clerk的员工的姓名、部门名称" class="headerlink" title="题5 （连接查询）列出岗位（job）为clerk的员工的姓名、部门名称"></a>题5 （连接查询）列出岗位（job）为clerk的员工的姓名、部门名称</h2><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee.ename,dept.dname <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept</span><br><span class="line"><span class="keyword">on</span> employee.deptno<span class="operator">=</span>dept.deptno</span><br><span class="line"><span class="keyword">where</span> job<span class="operator">=</span><span class="string">&#x27;CLERK&#x27;</span>;</span><br></pre></td></tr></table></figure></p><h2 id="题6-（分组聚合）列出各种工作类别的最低薪金，显示最低薪金大于6500的记录"><a href="#题6-（分组聚合）列出各种工作类别的最低薪金，显示最低薪金大于6500的记录" class="headerlink" title="题6 （分组聚合）列出各种工作类别的最低薪金，显示最低薪金大于6500的记录"></a>题6 （分组聚合）列出各种工作类别的最低薪金，显示最低薪金大于6500的记录</h2><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> job,<span class="built_in">min</span>(sal) <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> job</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">min</span>(sal)<span class="operator">&gt;</span><span class="number">6500</span>;</span><br></pre></td></tr></table></figure></p><h2 id="题7-（子查询）对客户表-customers-中地域（nls-territory）为AMERICA-的记录的客户经理，查询出客户经理的姓名（employee-ename）、薪水-employee-sal"><a href="#题7-（子查询）对客户表-customers-中地域（nls-territory）为AMERICA-的记录的客户经理，查询出客户经理的姓名（employee-ename）、薪水-employee-sal" class="headerlink" title="题7 （子查询）对客户表(customers)中地域（nls_territory）为AMERICA 的记录的客户经理，查询出客户经理的姓名（employee.ename）、薪水(employee.sal)"></a>题7 （子查询）对客户表(customers)中地域（nls_territory）为AMERICA 的记录的客户经理，查询出客户经理的姓名（employee.ename）、薪水(employee.sal)</h2><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">where</span> empno <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">distinct</span> account_mgr_id <span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> nls_territory<span class="operator">=</span><span class="string">&#x27;AMERICA&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h2 id="题8-（操作符in）在客户表中查出地域（nls-territory）为AMERICA、ITALY、INDIA、CHINA的客户编号（customer-id）、语言-nls-language"><a href="#题8-（操作符in）在客户表中查出地域（nls-territory）为AMERICA、ITALY、INDIA、CHINA的客户编号（customer-id）、语言-nls-language" class="headerlink" title="题8 （操作符in）在客户表中查出地域（nls_territory）为AMERICA、ITALY、INDIA、CHINA的客户编号（customer_id）、语言(nls_language);"></a>题8 （操作符in）在客户表中查出地域（nls_territory）为AMERICA、ITALY、INDIA、CHINA的客户编号（customer_id）、语言(nls_language);</h2><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> customer_id,nls_language <span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> nls_territory <span class="keyword">in</span></span><br><span class="line">(<span class="string">&#x27;AMERICA&#x27;</span>,<span class="string">&#x27;ITALY&#x27;</span>,<span class="string">&#x27;INDIA&#x27;</span>,<span class="string">&#x27;CHINA&#x27;</span>);</span><br></pre></td></tr></table></figure></p><h2 id="题9-查询employee表，显示每个部门、每个岗位的最高工资"><a href="#题9-查询employee表，显示每个部门、每个岗位的最高工资" class="headerlink" title="题9 查询employee表，显示每个部门、每个岗位的最高工资"></a>题9 查询employee表，显示每个部门、每个岗位的最高工资</h2><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,job,<span class="built_in">max</span>(sal) <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno,job</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载自&lt;a href=&quot;https://www.xieyihui.top/&quot;&gt;友情链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;多表连接查询&quot;&gt;&lt;a href=&quot;#多表连接查询&quot; class=&quot;headerlink&quot; title=&quot;多表连接查询&quot;&gt;&lt;/a&gt;多表连接查询&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="Oracle" scheme="http://caixuya.github.io/categories/Oracle/"/>
    
    
  </entry>
  
  <entry>
    <title>使用SQL语句操作表</title>
    <link href="http://caixuya.github.io/2020/11/18/%E4%BD%BF%E7%94%A8SQL%E8%AF%AD%E5%8F%A5%E6%93%8D%E4%BD%9C%E8%A1%A8/"/>
    <id>http://caixuya.github.io/2020/11/18/%E4%BD%BF%E7%94%A8SQL%E8%AF%AD%E5%8F%A5%E6%93%8D%E4%BD%9C%E8%A1%A8/</id>
    <published>2020-11-17T16:00:25.000Z</published>
    <updated>2022-04-14T15:41:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.xieyihui.top/">友情链接</a></p><h2 id="创建表的命令、插入记录、更改记录、删除记录的命令"><a href="#创建表的命令、插入记录、更改记录、删除记录的命令" class="headerlink" title="创建表的命令、插入记录、更改记录、删除记录的命令"></a>创建表的命令、插入记录、更改记录、删除记录的命令</h2><ul><li><strong>创建表的命令</strong><ul><li><code>命令格式：</code> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名</span><br><span class="line">(字段名<span class="number">1</span>  类型  约束(可选)， </span><br><span class="line">字段名<span class="number">2</span>  类型 约束(可选)，</span><br><span class="line">...</span><br><span class="line">字段名n 类型 约束(可选)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>插入记录</strong><ul><li><code>命令格式1：</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名</span><br><span class="line"><span class="keyword">values</span>(字段<span class="number">1</span>的值,字段<span class="number">2</span>的值,...,字段n的值);</span><br></pre></td></tr></table></figure></li><li><code>命令格式2：</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table_name(列<span class="number">1</span>,列<span class="number">2</span>,...)</span><br><span class="line"><span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,....)</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>更改记录</strong><ul><li><code>命令格式：</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名</span><br><span class="line"><span class="keyword">set</span> 列名<span class="operator">=</span>值</span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>清空表中的所有记录</strong><ul><li><code>命令格式：</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><h2 id="查询关键字"><a href="#查询关键字" class="headerlink" title="查询关键字"></a>查询关键字</h2></li></ul></li><li>排序<ul><li>降序<code>desc</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Order</span> <span class="keyword">by</span> 排序字段 <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></li><li>升序<code>asc</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Order</span> <span class="keyword">by</span> 排序字段 <span class="keyword">asc</span></span><br></pre></td></tr></table></figure></li></ul></li><li><strong>不选择重复行</strong><br> <code>Distinct</code><br>说明：重复的结果只显示<code>1</code>次</li><li><strong>筛选条件</strong><br>  <code>where</code><ul><li>命令格式：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,....</span><br><span class="line"><span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> 筛选条件;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>列取别名</strong><ul><li><code>命令格式1：</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">as</span> 别名 </span><br><span class="line">from...</span><br></pre></td></tr></table></figure></li><li><code>命令格式2：</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名 别名 </span><br><span class="line">from...</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>从select结果创建新表</strong><ul><li><code>命令格式：</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> ....</span><br></pre></td></tr></table></figure><h2 id="SQL操作符"><a href="#SQL操作符" class="headerlink" title="SQL操作符"></a>SQL操作符</h2></li></ul></li><li><strong>算数操作符</strong><br>  种类：+  -  *  &#x2F;<br>  功能：number类型的列，可使用算数操作符进行运算</li><li><strong>比较操作符</strong><br>  功能: 对两个表达式的值进行比较</li></ul><table><thead><tr><th align="center">种类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">!&#x3D;</td><td align="center">不等于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td></tr><tr><td align="center">IN(值1,值2,…)</td><td align="center">与列表中的值匹配</td></tr><tr><td align="center">LIKE</td><td align="center">字符匹配模式。匹配符 %：任意个字符。 匹配符 ?: 一个字符</td></tr><tr><td align="center">IS NULL</td><td align="center">判断字段值为空</td></tr></tbody></table><ul><li><strong>逻辑运算符</strong></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">用法</th></tr></thead><tbody><tr><td align="center">AND</td><td align="center">Where 条件A  and 条件B</td></tr><tr><td align="center">OR</td><td align="center">Where 条件A  or 条件B</td></tr><tr><td align="center">NOT</td><td align="center">Where not 条件</td></tr></tbody></table><ul><li><strong>集合运算符</strong></li></ul><table><thead><tr><th align="center">运算符</th><th align="center">用法</th></tr></thead><tbody><tr><td align="center">Union</td><td align="center">联合</td></tr><tr><td align="center">Union All</td><td align="center">联合所有</td></tr><tr><td align="center">Intersect</td><td align="center">交集</td></tr><tr><td align="center">Minus</td><td align="center">减集</td></tr></tbody></table><ul><li><strong>Minus 差集</strong><br>  <code>命令格式：</code>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> .. <span class="keyword">from</span> 表     <span class="comment">--结果A</span></span><br><span class="line">minus</span><br><span class="line"><span class="keyword">select</span> .. <span class="keyword">from</span> 表  <span class="comment">--结果B</span></span><br></pre></td></tr></table></figure>  说明：<code>A与B的交集</code><br><br>  举例：employee表中存放了在职和已退休员工的工号(empno)，retireEmp 存放了已退休员工的工号(rempno)。<br><br>要求：仅查询在职员工的工号<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno <span class="keyword">FROM</span> emp  </span><br><span class="line">MINUS</span><br><span class="line"><span class="keyword">SELECT</span> rempno <span class="keyword">FROM</span> retireEmp;</span><br></pre></td></tr></table></figure></li><li><strong>字符串连接符</strong><br>  说明：用于将两个字符串合并成一个新字符串<br>  <code>命令格式：</code>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列A <span class="operator">||</span> 列B</span><br></pre></td></tr></table></figure></li></ul><h1 id="练习习题"><a href="#练习习题" class="headerlink" title="练习习题"></a>练习习题</h1><h2 id="题1-确定合适的类型"><a href="#题1-确定合适的类型" class="headerlink" title="题1 确定合适的类型"></a>题1 确定合适的类型</h2><table><thead><tr><th align="center">属性名</th><th align="center">特征</th><th align="center">类型（宽度）</th></tr></thead><tbody><tr><td align="center">员工编号</td><td align="center">4位数字。如1111</td><td align="center"><code>NUMBER(4)</code></td></tr><tr><td align="center">员工姓名1</td><td align="center">英文字母，不超过10个字母。<br>要尽量高的存储空间利用率</td><td align="center"><code>VARCHAR2(10)</code></td></tr><tr><td align="center">员工姓名2</td><td align="center">汉字，不超过10个汉字<br>要尽量高的存储空间利用率</td><td align="center"><code>NVARCHAR2(10)</code></td></tr><tr><td align="center">岗位1</td><td align="center">英文字母，不超过10个字母</td><td align="center"><code>VARCHAR2(10)</code></td></tr><tr><td align="center">岗位2</td><td align="center">汉字，不超过10个汉字</td><td align="center"><code>NVARCHAR2(10)</code></td></tr><tr><td align="center">上级经理编号</td><td align="center">4位数字</td><td align="center"><code>NUMBER(4)</code></td></tr><tr><td align="center">入职日期</td><td align="center">年-月-日</td><td align="center"><code>DATE</code></td></tr><tr><td align="center">薪水</td><td align="center">数字，最大5位数</td><td align="center"><code>NUMBE(5)</code></td></tr><tr><td align="center">岗位津贴</td><td align="center">数字，最大5位数</td><td align="center"><code>NUMBER(5)</code></td></tr><tr><td align="center">所属部门编号</td><td align="center">2位数字。如01</td><td align="center"><code>NUMBER(2)</code></td></tr><tr><td align="center">证件照</td><td align="center">图片</td><td align="center"><code>BLOB</code></td></tr><tr><td align="center">自我介绍</td><td align="center">视频</td><td align="center"><code>BLOB</code></td></tr><tr><td align="center">简历</td><td align="center">可能超过2000汉字</td><td align="center"><code>CLOB(2000)</code></td></tr></tbody></table><h2 id="题2-约束的种类"><a href="#题2-约束的种类" class="headerlink" title="题2 约束的种类"></a>题2 约束的种类</h2><table><thead><tr><th align="center">约束</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">主键约束</td><td align="center"><code>primary key</code></td></tr><tr><td align="center">外键约束</td><td align="center"><code>foreign key</code></td></tr><tr><td align="center">非空约束</td><td align="center"><code>not null</code></td></tr><tr><td align="center">唯一值约束</td><td align="center"><code>unique</code></td></tr><tr><td align="center">默认约束</td><td align="center"><code>default  ‘默认值’</code></td></tr><tr><td align="center">Check约束</td><td align="center"><code>举例：check(gender=&#39;男&#39; or gender=&#39;女&#39;);</code></td></tr></tbody></table><h2 id="题3-创建部门表、约束"><a href="#题3-创建部门表、约束" class="headerlink" title="题3 创建部门表、约束"></a>题3 创建部门表、约束</h2><ul><li><strong>（1）创建部门表,表名为dept</strong></li></ul><table><thead><tr><th align="center">属性说明</th><th align="center">属性</th><th align="center">类型（宽度）</th><th align="center">约束</th></tr></thead><tbody><tr><td align="center">部门编号</td><td align="center">deptno</td><td align="center">number(2)</td><td align="center">主键</td></tr><tr><td align="center">部门名称</td><td align="center">dname</td><td align="center">varchar2(14)</td><td align="center">非空、唯一</td></tr><tr><td align="center">部门地址</td><td align="center">loc</td><td align="center">VARCHAR2(13)</td><td align="center">默认值 ‘company’</td></tr><tr><td align="center"><strong>代码：</strong></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept</span><br><span class="line">(deptno number(<span class="number">2</span>) <span class="keyword">primary</span> key,</span><br><span class="line">dname varchar2(<span class="number">14</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>,</span><br><span class="line">loc varchar2(<span class="number">13</span>) <span class="keyword">default</span><span class="string">&#x27;company&#x27;</span>);</span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><ul><li><strong>（2）将以下数据插入到dept中</strong></li></ul><table><thead><tr><th align="center">属性说明</th><th align="center">属性</th><th align="center">类型（宽度）</th><th align="center">约束</th></tr></thead><tbody><tr><td align="center">员工编号</td><td align="center">eno</td><td align="center">number(4)</td><td align="center">主键约束</td></tr><tr><td align="center">员工姓名</td><td align="center">ename</td><td align="center">varchar2(10)</td><td align="center">非空</td></tr><tr><td align="center">岗位</td><td align="center">job</td><td align="center">VARCHAR2(9)</td><td align="center"></td></tr><tr><td align="center">领导编号</td><td align="center">mgr</td><td align="center">number(4)</td><td align="center"></td></tr><tr><td align="center">入职日期</td><td align="center">Hiredate</td><td align="center">date</td><td align="center"></td></tr><tr><td align="center">薪资</td><td align="center">sal</td><td align="center">number(7,2)</td><td align="center"></td></tr><tr><td align="center">福利</td><td align="center">Comm</td><td align="center">number(7,2)</td><td align="center"></td></tr><tr><td align="center">所属部门号</td><td align="center">deptno</td><td align="center">number(2)</td><td align="center">外键，参照部门表的部门号<br>dept(deptno)</td></tr><tr><td align="center"><strong>代码：</strong></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">&#x27;Accounting&#x27;</span>,<span class="string">&#x27;New York&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">20</span>,<span class="string">&#x27;Research&#x27;</span>,<span class="string">&#x27;Dallas&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">30</span>,<span class="string">&#x27;Sales&#x27;</span>,<span class="string">&#x27;Chicago&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">40</span>,<span class="string">&#x27;Operations&#x27;</span>,<span class="string">&#x27;Boston&#x27;</span>);</span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="题4-使用rownum实现分页查询"><a href="#题4-使用rownum实现分页查询" class="headerlink" title="题4 使用rownum实现分页查询"></a>题4 使用rownum实现分页查询</h2><ul><li><strong>（1）查询employee表中按sal字段 降序排列后的 第5到第9条记录</strong></li></ul><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> e.<span class="operator">*</span>, rownum rn <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) e)</span><br><span class="line"><span class="keyword">where</span> rn<span class="operator">&gt;=</span><span class="number">5</span> <span class="keyword">and</span> rn<span class="operator">&lt;=</span><span class="number">9</span>;</span><br></pre></td></tr></table></figure></p><ul><li><strong>（2）查询employee表中按ename字段升序排列后的 第1到第3条记录</strong> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> e.<span class="operator">*</span>, rownum rn <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">order</span> <span class="keyword">by</span> ename <span class="keyword">asc</span>) e)</span><br><span class="line"><span class="keyword">where</span> rn<span class="operator">&gt;=</span><span class="number">1</span> <span class="keyword">and</span> rn<span class="operator">&lt;=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><h2 id="题5-筛选、排序、选择不重复行"><a href="#题5-筛选、排序、选择不重复行" class="headerlink" title="题5 筛选、排序、选择不重复行"></a>题5 筛选、排序、选择不重复行</h2></li><li><strong>（1）选出所有岗位为CLERK的记录的ename属性,sal属性, 按sal降序排序</strong></li></ul><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">where</span> job<span class="operator">=</span><span class="string">&#x27;CLERK&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></p><ul><li><strong>（2）选择出employee表中的所有岗位（job），每种岗位只显示1次</strong></li></ul><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> job <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure></p><h2 id="题6-SQL操作符"><a href="#题6-SQL操作符" class="headerlink" title="题6 SQL操作符"></a>题6 SQL操作符</h2><ul><li><strong>（1）查询employee表中姓名以字母A开头的员工</strong></li></ul><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;A%&#x27;</span>;</span><br></pre></td></tr></table></figure></p><ul><li><strong>（2）查询employee表中ename长度为5个字符的所有记录</strong></li></ul><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;_____&#x27;</span>;</span><br></pre></td></tr></table></figure></p><ul><li><strong>（3）查询employee表中comm字段为空的员工</strong></li></ul><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">where</span> comm <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></p><ul><li><strong>（4）查询岗位(job) 为 CLERK、MANAGER、SALSMAN之一的所有员工</strong></li></ul><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> employee</span><br><span class="line"><span class="keyword">where</span> job <span class="keyword">in</span>(<span class="string">&#x27;CLERK&#x27;</span>,<span class="string">&#x27;MANAGER&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>);</span><br></pre></td></tr></table></figure></p><ul><li><strong>（5）将employee表的job列和ename列进行拼接，显示 出 job列 _ 姓名列， 新列显示成 “岗位_姓名”</strong></li></ul><p> <strong>代码：</strong><br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> job <span class="operator">||</span> <span class="string">&#x27;_&#x27;</span> <span class="operator">||</span> ename 岗位_姓名 <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载自&lt;a href=&quot;https://www.xieyihui.top/&quot;&gt;友情链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建表的命令、插入记录、更改记录、删除记录的命令&quot;&gt;&lt;a href=&quot;#创建表的命令、插入记录、更改记录、删除记录的命令&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Oracle" scheme="http://caixuya.github.io/categories/Oracle/"/>
    
    
  </entry>
  
  <entry>
    <title>Oracle数据类型、约束、ROWNUM实现分页查询</title>
    <link href="http://caixuya.github.io/2020/11/17/Oracle%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E7%BA%A6%E6%9D%9F%E3%80%81ROWNUM%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    <id>http://caixuya.github.io/2020/11/17/Oracle%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E7%BA%A6%E6%9D%9F%E3%80%81ROWNUM%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-11-17T15:39:48.000Z</published>
    <updated>2022-04-14T15:40:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.xieyihui.top/">友情链接</a></p><h1 id="课堂笔记"><a href="#课堂笔记" class="headerlink" title="课堂笔记"></a>课堂笔记</h1><h2 id="Oracle-11g-安装"><a href="#Oracle-11g-安装" class="headerlink" title="Oracle 11g 安装"></a>Oracle 11g 安装</h2><p><code>超详细</code>的安装教程：<a href="https://blog.csdn.net/lidapang123/article/details/88928035">https://blog.csdn.net/lidapang123/article/details/88928035</a><br></p><h2 id="Oracle中的数据类型"><a href="#Oracle中的数据类型" class="headerlink" title="Oracle中的数据类型"></a>Oracle中的数据类型</h2><p> <strong>Oracle中的数据类型：<code>字符型</code>、<code>数值型</code>、<code>日期型</code>、<code>LOB类型</code>、<code>（BLOB、CLOB）</code></strong><br></p><ul><li><strong>字符类型</strong><br> （1）以<code>固定长度</code>存放字符串：CHAR(n)、NCHAR(n)<br><br> 说明：CHAR(10)，存一个字符串 ’abc’；NCHAR以<code>UNICODE</code>存储每个字符<br><br> 区别：n的最大取值：char(n),n的最大取值是2000;nchar(n),n的最大取值是1000.<br><br> （2）以<code>可变长度</code>存储字符串  VARCHAR2(n)、NVARCHAR2(n)<br><br>  说明：VARCHAR2(10)，存一个字符串’abc’，NVARCHAR2 以<code>UNICODE编码</code>存储每个字符<br><br> 区别：n的最大取值：VARCHAR2(n),n的最大取值是4000;NVARCHAR2(n),n的最大取值是2000.<br></li><li><strong>数值型</strong><br> 从输入的数值划分：<code>整数</code>、<code>小数</code><br><br> （1）NUMBER类型<br><br>a.表示小数<br><br>举例： NUMBER(5,2)，总共5个有效数字，小数点后保留2位，例如：123.45<br><br>b.表示整数 NUMBER(P)<br><br>举例：NUMBER(5)，5位数的整数<br></li><li><strong>日期型</strong><ul><li>（1）DATE型<br><br> 格式：<code>YYYY-MM-DD HH:MM:SS</code><br><br> 精确程度：<code>秒</code><br></li><li>（2）TIMESTAMP<br><br> 精确程度：<code>0.000001秒</code><br><br> 但使用较少</li></ul></li><li><strong>大对象类型（Large OBject）</strong><ul><li>（1）<code>BLOB</code>类型 <code>(Binary Large OBject)</code><br><br> 以<code>二进制</code>形式存储<br><br> 举例：图片、音频、视频<br><br> 最大存储<code>4G</code>字节<br></li><li>（2）<code>CLOB</code>类型 <code>(Character Large Object)</code><br><br> 以<code>字符串</code>形式存储<br><br> 举例：简历、新闻、文章<br><br> 最大存储<code>4G</code>字节<br><h3 id="数据类型总结"><a href="#数据类型总结" class="headerlink" title="数据类型总结"></a>数据类型总结</h3></li></ul></li></ul><table><thead><tr><th align="center">数据</th><th align="center">应采用的类型</th></tr></thead><tbody><tr><td align="center">字符串</td><td align="center">Nvarchar2、varchar2</td></tr><tr><td align="center">数值型</td><td align="center">Number</td></tr><tr><td align="center">日期型</td><td align="center">Date</td></tr><tr><td align="center">图片、音频、视频</td><td align="center">BLOB</td></tr><tr><td align="center">超过千字的文本</td><td align="center">CLOB</td></tr></tbody></table><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><strong><code>6种</code>常用约束</strong></p><table><thead><tr><th align="center">约束</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">主键约束</td><td align="center">primary key</td></tr><tr><td align="center">外键约束</td><td align="center">foreign key</td></tr><tr><td align="center">非空约束</td><td align="center">not null</td></tr><tr><td align="center">唯一值约束</td><td align="center">unique</td></tr><tr><td align="center">默认约束</td><td align="center">default  ‘默认值’</td></tr><tr><td align="center">Check约束</td><td align="center">举例：check(gender&#x3D;’男’ or gender&#x3D;’女’);</td></tr><tr><td align="center"><strong><code>2个</code>添加约束的时机</strong></td><td align="center"></td></tr></tbody></table><ul><li><strong>（1）创建时添加约束</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 </span><br><span class="line">(列名<span class="number">1</span> 数值类型<span class="number">1</span> 约束<span class="number">1</span>,</span><br><span class="line">列名<span class="number">2</span> 数值类型<span class="number">2</span> 约束<span class="number">2</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><strong>（2）创建表之后，使用<code>alter table</code>命令</strong><ul><li>添加主键约束<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 主键名 <span class="keyword">PRIMARY</span> KEY (主键列);</span><br></pre></td></tr></table></figure></li><li>添加外键约束<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">Foreign</span> Key(从表的外键列) <span class="keyword">References</span> 主表名(主表的主键列);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>使用<code>PL/SQL Developer</code>图形界面添加约束</strong><br>   <img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/PLSQL_%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E6%93%8D%E4%BD%9C.png"></p><h2 id="ROWID和ROWNUM"><a href="#ROWID和ROWNUM" class="headerlink" title="ROWID和ROWNUM"></a>ROWID和ROWNUM</h2><ul><li><strong>ROWID</strong><br> 说明：RowID可以理解为Oracle为每一张表添加的一个<code>隐藏列</code>。<br><br> 表中的每一行（记录），都有一个行地址，ROWID用于查询该行地址。<br><br> 任意两行的ROWID不同。<br><br> ROWID只能<code>查询</code>，不能<code>修改</code>、<code>删除</code>。<br></li><li><strong>ROWNUM</strong><br> 说明：对于查询结果表，rownum能返回每一行在结果表的序号。<br><br>  结果表中的第一行rownum为1、第n行rownum为n。<br><h2 id="Rownum实现分页查询"><a href="#Rownum实现分页查询" class="headerlink" title="Rownum实现分页查询"></a>Rownum实现分页查询</h2></li></ul><p><strong>功能：从表X中，查出按字段F排序后的 第M到第N条记录</strong><br><code>命令公式：</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> e.<span class="operator">*</span>, rownum rn <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表X <span class="keyword">order</span> <span class="keyword">by</span> 字段F 排序方式) e)</span><br><span class="line"><span class="keyword">where</span> rn<span class="operator">&gt;=</span>M <span class="keyword">and</span> rn<span class="operator">&lt;=</span>N;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载自&lt;a href=&quot;https://www.xieyihui.top/&quot;&gt;友情链接&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;课堂笔记&quot;&gt;&lt;a href=&quot;#课堂笔记&quot; class=&quot;headerlink&quot; title=&quot;课堂笔记&quot;&gt;&lt;/a&gt;课堂笔记&lt;/h1&gt;&lt;h2 id=&quot;Or</summary>
      
    
    
    
    <category term="Oracle" scheme="http://caixuya.github.io/categories/Oracle/"/>
    
    
  </entry>
  
  <entry>
    <title>struts2入门</title>
    <link href="http://caixuya.github.io/2020/11/16/struts2%E5%85%A5%E9%97%A8/"/>
    <id>http://caixuya.github.io/2020/11/16/struts2%E5%85%A5%E9%97%A8/</id>
    <published>2020-11-15T16:09:48.000Z</published>
    <updated>2022-04-14T15:41:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>编辑工具：<a href="https://pan.baidu.com/s/1aEekXvTNlW2w0vhVF8Nb2A">Spring Tool Suite 3</a><br><br>提取码：f03i<br><br>java环境：<a href="https://pan.baidu.com/s/1fEEUrrcJISCz6jTTdhs92A">jdk1.8</a><br><br>提取码：vo2x<br><br>运行环境：<a href="https://pan.baidu.com/s/1eGFRJw2jG6FT0C0i8UMXfg">tomcat9.0(64)</a><br><br>提取码：fw8p<br></p><h1 id="在项目中使用Struts2"><a href="#在项目中使用Struts2" class="headerlink" title="在项目中使用Struts2"></a>在项目中使用Struts2</h1><p>Struts2配置步骤、执行过程<br><br>先放上项目结构图：<br><br>Login.java是放在src目录下的action包下，struts.xml是放在WebContent目录下的WEB-INF子目录下的classes文件夹中，jar包是放在WebContent目录下的WEB-INF子目录下的lib目录中<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/struts%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BE1.PNG"><br><br>web.xml是放在WebContent目录下的WEB-INF子目录下<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/struts%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BE2.PNG"><br><br>login.jsp和welcome.jsp是放在WebContent目录下<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/struts%E5%85%A5%E9%97%A8%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BE3.PNG"><br></p><h2 id="新建工程-Spring-Tool-Suite-3"><a href="#新建工程-Spring-Tool-Suite-3" class="headerlink" title="新建工程(Spring Tool Suite 3)"></a>新建工程(Spring Tool Suite 3)</h2><p>菜单栏“File”-“new”-“Dynamic-Web-Project”<br></p><h2 id="拷贝jar包"><a href="#拷贝jar包" class="headerlink" title="拷贝jar包"></a>拷贝jar包</h2><p>将在下面连接中下载好的“struts2-jar包和配置文件”压缩文件夹解压，复制“struts2-basic-13jars”文件中所有jar包到Web工程的lib目录下<br><br><a href="https://pan.baidu.com/s/1flME6c2eLwX7DIGbQTYGpw">struts2-jar包和配置文件</a><br><br>提取码：0trk<br></p><h2 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h2><p>找到WEB-INF目录下的web.xml文件，在<web-app>标签下添加过滤器filter<br><br>如果没有的话就在WEB-INF目录下新建一个web.xml文件，具体操作如下：右键点击“WEB-INF”-“New”-“File”，在“File name”后面填上文件夹的名称“web.xml”<br><br>或者在“struts2-jar包和配置文件”压缩文件夹中有一个已经配置好的web.xml文件，可以直接复制粘贴到项目中使用。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee </span></span></span><br><span class="line"><span class="string"><span class="tag">http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span><span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;welcome-file&gt;项目主页，我的项目主页是login.jsp&lt;/welcome-file&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置Struts-xml"><a href="#配置Struts-xml" class="headerlink" title="配置Struts.xml"></a>配置Struts.xml</h2><p>在WEB-INF目录下新建一个classes文件夹具体操作如下：右键点击“WEB-INF”-“New”-“Folder”，在“Folder name”后面填上文件夹的名称“classes”<br><br>在“classes”目录下创建一个Struts.xml文件，创建步骤如上同。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">struts</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置 struts2标签 的主题为 simple--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.ui.theme&quot;</span> <span class="attr">value</span>=<span class="string">&quot;simple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置 post方法接收的数据 编码格式为 utf-8--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.i18n.encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- package的namespace: 通常写功能模块名; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者在“struts2-jar包和配置文件”压缩文件夹中有一个已经配置好的Struts.xml文件，可以直接复制粘贴到项目中使用（在压缩文件的“Struts.xml模板”文件夹中）。<br></p><h2 id="创建login类（login-java）"><a href="#创建login类（login-java）" class="headerlink" title="创建login类（login.java）"></a>创建login类（login.java）</h2><p>在“Java Resources”-“src”中创建一个包，我这里创建的是“action”包，在包中创建一个“Login.java”文件，具体步骤如下，右键“src”-“New”-“Package”,Name后面敲上包名“action”到这里包就建好了，接下来创建类，右键点击“action”-“New”-“class”,在Name后面敲上“Login”,创建好login类后就开始编辑login.java文件，如下<br><br>示例：login.java<br></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Login</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成get和set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span>(<span class="params">String username</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.username=username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span>(<span class="params">String password</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.password=password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//创建check方法，对应Struts.xml中action的method属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">check</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;接收到登录请求:username:&quot;</span>+username+<span class="string">&quot;,password&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!username.<span class="keyword">equals</span>(<span class="string">&quot;&quot;</span>)&amp;&amp;!password.<span class="keyword">equals</span>(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">//用户名密码不为空</span></span><br><span class="line">            String message=<span class="string">&quot;登录成功&quot;</span>+username;</span><br><span class="line">            ActionContext.getContext().getValueStack().<span class="keyword">set</span>(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(username.<span class="keyword">equals</span>(<span class="string">&quot;&quot;</span>)&amp;&amp;!password.<span class="keyword">equals</span>(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">//用户名为空</span></span><br><span class="line">            String message=<span class="string">&quot;登录失败,用户名为空&quot;</span>;</span><br><span class="line">            ActionContext.getContext().getValueStack().<span class="keyword">set</span>(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!username.<span class="keyword">equals</span>(<span class="string">&quot;&quot;</span>)&amp;&amp;password.<span class="keyword">equals</span>(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">//密码为空</span></span><br><span class="line">            String message=<span class="string">&quot;登录失败,密码为空&quot;</span>;</span><br><span class="line">            ActionContext.getContext().getValueStack().<span class="keyword">set</span>(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//用户名和密码为空</span></span><br><span class="line">                String message=<span class="string">&quot;登录失败，用户名和密码为空&quot;</span>;</span><br><span class="line">                ActionContext.getContext().getValueStack().<span class="keyword">set</span>(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="jsp页面"><a href="#jsp页面" class="headerlink" title="jsp页面"></a>jsp页面</h2><p>1.在WEB-INF目录下新建jsp页面，我这里新建的是login.jsp页面和welcome.jsp页面<br><br>示例：welcome.jsp页面<br></p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;%</span><span class="language-ruby">@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span></span></span><br><span class="line"><span class="language-ruby">    pageEncoding=<span class="string">&quot;utf-8&quot;</span></span><span class="language-xml">%&gt;</span></span><br><span class="line"><span class="language-xml">&lt;%</span><span class="language-ruby"><span class="variable">@taglib</span> uri=<span class="string">&quot;/struts-tags&quot;</span> prefix=<span class="string">&quot;s&quot;</span></span><span class="language-xml">%&gt;</span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎您<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">&quot;message&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果图如下：<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/struts_welcome.PNG"><br>其中<code>&lt;s:property value=&quot;message&quot;/&gt;</code>这句话放在不同位置效果不一样，可以根据自己的需要选择放的位置，这句话也可以放在<code>&lt;h1&gt;``&lt;form&gt;</code>等标签中，以下是不同位置的效果图<br><br>放在<code>&lt;h1&gt;</code>里面<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">···（省略部分代码）</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎您<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">&quot;message&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">···</span><br></pre></td></tr></table></figure><p><code>&lt;h1&gt;</code>效果图<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/struts_welcome1.PNG"><br>放在<code>&lt;form&gt;</code>里面<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">···（省略部分代码）</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">&quot;message&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎您<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span><span class="comment">&lt;!--hr标签是一条黑色的分割线--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">···</span><br></pre></td></tr></table></figure><p><code>&lt;form&gt;</code>效果图<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/struts_welcome2.PNG"><br><br>2.在页面中引用 struts标签库<br></p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!--在页面中引用 struts标签库，引用后可使用这条语句</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">&lt;s:property value=&quot;Action的属性名&quot;/&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">来获取Action的属性--&gt;</span></span></span><br><span class="line"><span class="language-xml">&lt;%</span><span class="language-ruby"><span class="variable">@taglib</span> uri=<span class="string">&quot;/struts-tags&quot;</span> prefix=<span class="string">&quot;s&quot;</span></span><span class="language-xml">%&gt;</span></span><br></pre></td></tr></table></figure><p>示例：login.jsp页面<br></p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">&lt;%</span><span class="language-ruby">@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span></span></span><br><span class="line"><span class="language-ruby">    pageEncoding=<span class="string">&quot;utf-8&quot;</span></span><span class="language-xml">%&gt;</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--在页面中引用 struts标签库--&gt;</span></span></span><br><span class="line"><span class="language-xml">&lt;%</span><span class="language-ruby"><span class="variable">@taglib</span> uri=<span class="string">&quot;/struts-tags&quot;</span> prefix=<span class="string">&quot;s&quot;</span></span><span class="language-xml">%&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--获取action的属性，在login.java中可以看到String message=&quot;登录成功&quot;+username;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">这里是定义一个message并对它赋值，定义的原因是要把Action的属性名设置成message。</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">ActionContext.getContext().getValueStack().set(&quot;message&quot;, message);</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">就是这句语句中把Action的属性名设置成message，</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">设置Action的属性名的原因当然是为了在&lt;s:property value=&quot;Action的属性名&quot;/&gt;这一步获取，</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">至于获取的原因则是为了让message的值显示在页面中，怎么显示呢？</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">看这个语句的下一句，它是一个return语句return &quot;error&quot;;当这个return语句所属的if条件为真时，返回error，</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">那么返回这个error有什么用呢？那就得看struts.xml文件了--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">&quot;message&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>示例：struts.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">struts</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置 struts2标签 的主题为 simple--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.ui.theme&quot;</span> <span class="attr">value</span>=<span class="string">&quot;simple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--设置 post方法接收的数据 编码格式为 utf-8--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.i18n.encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- package的namespace: 通常写功能模块名; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- package的子元素action：写具体的操作  由哪个Action类（即class=&quot;包名.类名&quot;）、 哪个方法处理（即类中定义的方法，也就是上面的Login.java类的check()方法）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--action的子元素result：写处理结果、跳转到哪个页面,这里的name对应的就是login.java中的return的值，当return的值与name值相等时，跳转到&lt;result&gt;&lt;/result&gt;中间的页面 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--action的子元素name的值与login.jsp中&lt;form action=&quot;login&quot; method=&quot;post&quot;&gt;的action值相对应--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;action.Login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;check&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>welcome.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置运行环境"><a href="#配置运行环境" class="headerlink" title="配置运行环境"></a>配置运行环境</h2><p>“Window”-“Preferences”-“Server”-“Runtime Environment”<br></p><h3 id="添加tomcat运行环境"><a href="#添加tomcat运行环境" class="headerlink" title="添加tomcat运行环境"></a>添加tomcat运行环境</h3><p>“Add”-“Apache”-“Apache Tomcat v9.0”（这里选择下载的tomcat的版本号）-“Next”-“Browse”(选择tomcat的位置)-“Finish”-“Apply and Close”<br></p><h3 id="配置Java-Build-Path"><a href="#配置Java-Build-Path" class="headerlink" title="配置Java Build Path"></a>配置Java Build Path</h3><p>右键项目-“Build Path”-“Configure Build Path”-“Java Build Path”-“Libraries”-“Add Library”-“Server Runtime”-“Next”-“Apache Tomcat9.0”-“Finish”-“Apply and Close”<br></p><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>“Run”-“Run As”-“Run On Server”-“Choose an existing server”-“localhost”-“Tomcatv9.0 Server at localhost”，选择刚刚添加的服务器-“Finish”<br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编辑工具：&lt;a href=&quot;https://pan.baidu.com/s/1aEekXvTNlW2w0vhVF8Nb2A&quot;&gt;Spring Tool Suite 3&lt;/a&gt;&lt;br&gt;&lt;br&gt;提取码：f03i&lt;br&gt;&lt;br&gt;java环境：&lt;a href=&quot;https://pan</summary>
      
    
    
    
    <category term="SSH_struts2" scheme="http://caixuya.github.io/categories/SSH-struts2/"/>
    
    
  </entry>
  
  <entry>
    <title>oracle数据库的下载以及可视化工具PLSQL Developer的配置</title>
    <link href="http://caixuya.github.io/2020/11/08/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%A5%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7PLSQL%20Developer%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://caixuya.github.io/2020/11/08/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%A5%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7PLSQL%20Developer%E7%9A%84%E9%85%8D%E7%BD%AE/</id>
    <published>2020-11-08T10:52:16.000Z</published>
    <updated>2022-04-14T15:40:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据库：oracle数据库<br><br>oracle数据库下载地址：<a href="https://pan.baidu.com/s/1IWGulfEeP8DYrF6dnOF6BQ">oracle</a><br>提取码：os0i<br>可视化工具：PLSQL Developer<br><br>可视化工具下载地址：<a href="https://pan.baidu.com/s/1R71jc8ojjt8cm6nDD3b3mw">PLSQL Developer</a><br><br>提取码：i2ay  <br></p><h1 id="oracle官网下载方法"><a href="#oracle官网下载方法" class="headerlink" title="oracle官网下载方法"></a>oracle官网下载方法</h1><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>复制以下链接访问oracle官网<br><br><code>oracle.com</code>或点击<a href="http://www.oracle.com/">这里</a>访问<br></p><h2 id="更改语言-各国语言切换"><a href="#更改语言-各国语言切换" class="headerlink" title="更改语言(各国语言切换)"></a>更改语言(各国语言切换)</h2><p>在官网底部找到country&#x2F;region，单击<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/oracle_country.png"><br><br>然后找到<code>Asia Pacific</code>,单击后就可以看到可切换的亚洲的各种语言,点击“中国-简体中文”即可将网页更换到中文版本<br></p><h2 id="oracle下载（oracle-11g）"><a href="#oracle下载（oracle-11g）" class="headerlink" title="oracle下载（oracle_11g）"></a>oracle下载（oracle_11g）</h2><p>点击网页顶部导航栏的“产品”，单击软件目录下的“oracle数据库”，然后点击如下图所示的按钮，就可以看到oracle最新版本以及其他版本的产品信息<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/oracle%E6%9B%B4%E5%A4%9A%E7%89%88%E6%9C%AC.PNG"><br><br>我用的是oracle版本是11g，这里就写出如何找到11g这个版本，以上步骤成功以后，把网页进度条拉到中间位置即可看到11g的下载链接<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/oracle_11g.PNG"><br><br>点击后选择适合的oracle下载，注意11g版本windows的和linux的是在这里选择的，按需选择下载<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/oracle%E4%B8%8B%E8%BD%BD.PNG"><br></p><h1 id="PLSQL的配置"><a href="#PLSQL的配置" class="headerlink" title="PLSQL的配置"></a>PLSQL的配置</h1><h2 id="替换文件"><a href="#替换文件" class="headerlink" title="替换文件"></a>替换文件</h2><p>安装好oracle后将<br><br><code>Oracle安装目录\product\11.2.0\dbhome_2\NETWORK\ADMIN\tnsnames.ora</code><br><br>  替换掉<br><br><code>PLSQL解压目录\PLSQL\instantclient_11_2\tnsnames.ora</code><br></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>右键单击电脑，选择<code>属性</code>-<code>高级属性</code>-<code>环境变量</code>-<code>新建</code>，<br><br><code>NLS_LANG = SIMPLIFIED CHINESE_CHINA.ZHS16GBK</code><br><br><code>TNS_ADMIN = PLSQL解压目录\PLSQL\instantclient_11_2</code><br><br>以上两条分开的，也就是需要新建两条记录，等号前的是变量名，等号后的是变量值<br></p><h2 id="PLSQL-Developer-环境设置"><a href="#PLSQL-Developer-环境设置" class="headerlink" title="PLSQL Developer 环境设置"></a>PLSQL Developer 环境设置</h2><p>不登录情况下进入PLSQL Developer<br>1.位置<br><br><code>工具 -&gt; 首选项 -&gt; 连接</code><br><br>2.设置<br><br><code>Oracle主目录名=Oracle安装目录\product\11.2.0\dbhome_2</code><br><br><code>OCI库=PLSQL解压目录\PLSQL\instantclient_11_2\oci.dll</code><br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据库：oracle数据库&lt;br&gt;&lt;br&gt;oracle数据库下载地址：&lt;a href=&quot;https://pan.baidu.com/s/1IWGulfEeP8DYrF6dnOF6BQ&quot;&gt;oracle&lt;/a&gt;&lt;br&gt;提取码：os0i&lt;br&gt;可视化工具：PLSQL Develo</summary>
      
    
    
    
    <category term="Oracle" scheme="http://caixuya.github.io/categories/Oracle/"/>
    
    
  </entry>
  
  <entry>
    <title>navicat导入sql文件失败解决办法</title>
    <link href="http://caixuya.github.io/2020/06/18/navicat%E5%AF%BC%E5%85%A5sql%E6%96%87%E4%BB%B6%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://caixuya.github.io/2020/06/18/navicat%E5%AF%BC%E5%85%A5sql%E6%96%87%E4%BB%B6%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2020-06-18T01:09:25.000Z</published>
    <updated>2022-04-14T15:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>navicat导入.sql文件失败的话，先新建一个与所需要导入的数据库的字符集以及排列规则都相同的数据库，如下：<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/mysql2.png"><br><br>直接在创建出来的数据库上右键“运行sql文件”，选择要导入的数据库，然后勾一三，点击“开始”，等待完成即可<br><br><img src="https://cxy-1300765640.cos.ap-nanjing.myqcloud.com/hexo_blog/mysql1.png"><br></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;navicat导入.sql文件失败的话，先新建一个与所需要导入的数据库的字符集以及排列规则都相同的数据库，如下：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://cxy-1300765640.cos.ap-nanjing.myqcloud.com</summary>
      
    
    
    
    <category term="mysql" scheme="http://caixuya.github.io/categories/mysql/"/>
    
    
  </entry>
  
  <entry>
    <title>心情记录:今天总算把博客完善了</title>
    <link href="http://caixuya.github.io/2020/06/07/%E5%BF%83%E6%83%85%E8%AE%B0%E5%BD%95-%E4%BB%8A%E5%A4%A9%E6%80%BB%E7%AE%97%E6%8A%8A%E5%8D%9A%E5%AE%A2%E5%AE%8C%E5%96%84%E4%BA%86/"/>
    <id>http://caixuya.github.io/2020/06/07/%E5%BF%83%E6%83%85%E8%AE%B0%E5%BD%95-%E4%BB%8A%E5%A4%A9%E6%80%BB%E7%AE%97%E6%8A%8A%E5%8D%9A%E5%AE%A2%E5%AE%8C%E5%96%84%E4%BA%86/</id>
    <published>2020-06-06T16:29:54.000Z</published>
    <updated>2022-04-09T16:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天总算是把这个博客的功能完善了，之前以为弄评论区评论又要把域名备案，一系列东西过于繁杂，就想着有时间再弄，到今天，闲下来了，在网上找方案捣鼓了一下午，总算是好了，非常开心，高兴了一晚上<br><br>身边的人不明白我高兴的缘由，我也不知道跟谁分享，就把此刻高兴到跳脚的心情分享在这里吧，哈哈哈哈哈</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天总算是把这个博客的功能完善了，之前以为弄评论区评论又要把域名备案，一系列东西过于繁杂，就想着有时间再弄，到今天，闲下来了，在网上找方案捣鼓了一下午，总算是好了，非常开心，高兴了一晚上&lt;br&gt;&lt;br&gt;身边的人不明白我高兴的缘由，我也不知道跟谁分享，就把此刻高兴到跳脚的心情</summary>
      
    
    
    
    <category term="daily" scheme="http://caixuya.github.io/categories/daily/"/>
    
    
  </entry>
  
</feed>
